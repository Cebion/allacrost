--------------------------------------------------------------------------------
-- a01_harrvah_capital_aftermath.lua
--
-- The state of Harrvah after the attack map script completes. The player has free
-- control to explore the city and complete the events necessary to proceed to the
-- sand dock map to finish out the chapter.
--------------------------------------------------------------------------------
local ns = {}
setmetatable(ns, {__index = _G})
a01_harrvah_capital_aftermath = ns;
setfenv(1, ns);

-- Set to true to turn on debugging messages generated by this map script
DEBUG = true;

data_file = "lua/data/maps/harrvah_capital.lua";
location_filename = "img/portraits/locations/blank.png";
map_name = "Harrvah Capital";

sound_filenames = {};

music_filenames = {};
music_filenames[1] = "mus/Theme_of_Tragedy.ogg";

-- Primary Map Classes
Map = {};
LocalRecords = {};
GlobalRecords = {};
DialogueManager = {};
EventManager = {};
ObjectManager = {};
TileManager = {};
TreasureManager = {};
TransitionManager= {};


enemy_ids = { }

-- Containers used to hold pointers to various class objects.
contexts = {};
zones = {};
objects = {};
sprites = {};
dialogues = {};
event_sequences = {}; -- Holds IDs of the starting event for each event chain


-- All custom map functions are contained within the following table.
-- String keys in this table serves as the names of these functions.
functions = {};

-- Shorthand names for map contexts
contexts["exterior"] = hoa_map.MapMode.CONTEXT_08; -- Displays the exterior of the town after the attack
contexts["interior-a"] = hoa_map.MapMode.CONTEXT_03;
contexts["interior-b"] = hoa_map.MapMode.CONTEXT_04;
contexts["interior-c"] = hoa_map.MapMode.CONTEXT_05;
contexts["interior-d"] = hoa_map.MapMode.CONTEXT_06;
contexts["interior-e"] = hoa_map.MapMode.CONTEXT_07;

-- Define the possible load points for this map
load_points = {};
load_points[-1] = "Debug: In the middle of town on the main street";
load_points[-2] = "Debug: Just outside the castle throne room";
load_points[0] = "Appearing in Claudius' bedroom";
load_points[1] = "Between the cliffs, coming from the sand dock";
load_points[2] = "Near the underground passage entrance on the left side of the map";
load_points[100] = "Save point: Inside the inn";

----------------------------------------------------------------------------
---------- Load Functions
----------------------------------------------------------------------------

function Load(m)
	Map = m;
	LocalRecords = Map.local_record_group;
	GlobalRecords = Map.global_record_group;
	DialogueManager = Map.dialogue_supervisor;
	EventManager = Map.event_supervisor;
	ObjectManager = Map.object_supervisor;
	TileManager = Map.tile_supervisor;
	TransitionManager = Map.transition_supervisor;
	TreasureManager = Map.treasure_supervisor;

	-- Setup the order in which we wish to draw the tile and object layers
	Map:ClearLayerOrder();
	Map:AddTileLayerToOrder(0);
	Map:AddTileLayerToOrder(1);
	Map:AddTileLayerToOrder(2);
	Map:AddObjectLayerToOrder(0);
	Map:AddTileLayerToOrder(3);
	Map:AddTileLayerToOrder(4);

	CreateZones();
	CreateObjects();
	CreateSprites();
	CreateDialogueReferences();
	CreateEvents();
	CreateDialogues();

	Map:SetCurrentTrack(0);

	-- TODO: figure out if visuals should be disabled normally, or wait for control to be given to the player before they are displayed
	-- Map:DisableIntroductionVisuals();
	Map.unlimited_stamina = true;
	Map:ShowStaminaBar(false);
	Map:ShowDialogueIcons(true);
	-- Initially set the screen to black, then slowly fade it back in over 3 seconds
	VideoManager:FadeScreen(hoa_video.Color(0.0, 0.0, 0.0, 1.0), 0);
	VideoManager:FadeScreen(hoa_video.Color(0.0, 0.0, 0.0, 0.0), 3000);

	LaunchLoadPoint(Map.load_point);
-- LaunchLoadPoint(-1);

	IfPrintDebug(DEBUG, "Map loading complete");
end -- Load(m)



function LaunchLoadPoint(load_point)
	IfPrintDebug(DEBUG, "Launching load point...");

	-- Make sure the load point for the map matches one of the defined values
	local point_valid = false;
	for id in pairs(load_points) do
		if (load_point == id) then
			point_valid = true;
			break;
		end
	end

	if (point_valid == false) then
		IfPrintDebug(true, "WARNING: map tried to launch with unknown load point: " .. load_point);
		return;
	end

	-- Common launch settings
	Map:SetPlayerSprite(sprites["claudius"]);
	Map:SetCamera(sprites["claudius"]);

	-- Load-point specific settings
	if (load_point == 0) then
		-- The map opens with Claudius in his room, and his mother downstairs
		sprites["claudius"]:SetContext(contexts["interior-c"]);
		sprites["claudius"]:SetXPosition(184, 0);
		sprites["claudius"]:SetYPosition(114, 0);
	elseif (load_point == 1) then
		-- South of the entrance to the sand docks
		sprites["claudius"]:SetContext(contexts["exterior"]);
		sprites["claudius"]:SetXPosition(98, 0);
		sprites["claudius"]:SetYPosition(80, 0);
		GlobalRecords:SetRecord("left_home", 1);
	elseif (load_point == 2) then
		-- TODO: near the underground passage entrance
	elseif (load_point == 100) then
		-- TODO: save point somewhere in town
	elseif (load_point == -1) then
		-- Main road in the middle of town
		sprites["claudius"]:SetContext(contexts["exterior"]);
		sprites["claudius"]:SetXPosition(98, 0);
		sprites["claudius"]:SetYPosition(148, 0);
		GlobalRecords:SetRecord("left_home", 1);
	elseif (load_point == -2) then
		-- Right outside the entrance to the throne room
		DEBUG = true;
		sprites["claudius"]:SetContext(contexts["exterior"]);
		sprites["claudius"]:SetXPosition(98, 0);
		sprites["claudius"]:SetYPosition(64, 0);
		GlobalRecords:SetRecord("left_home", 1);
		-- TODO:
	else
		IfPrintDebug(true, "WARNING: map launched with a valid load point that had no instructions: " .. load_point);
	end
end -- function LaunchLoadPoint()



function CreateZones()
	IfPrintDebug(DEBUG, "Creating zones...");

	-- Exit to Claudius' home: triggers a dialogue between Claudius and his mother
	zones["leave-home"] = hoa_map.CameraZone(170, 174, 128, 130, contexts["interior-a"]);
	zones["leave-home"]:SetZoneID(1);
	Map:AddZone(zones["leave-home"]);

	-- Entry to barracks: triggers the scene in the throne room where the king speaks to the knights
	zones["barracks-entry"] = hoa_map.CameraZone(138, 142, 48, 60, contexts["interior-b"]);
	zones["barracks-entry"]:SetZoneID(2);
	Map:AddZone(zones["barracks-entry"]);
end



function CreateObjects()
	IfPrintDebug(DEBUG, "Creating objects...");

	local object = {};
	local treasure_container = {};

	-- TEMP: this glimmer treasure is added at the start of this map for testing purposes. Remove later
	object = hoa_map.GlimmerTreasure();
	object:SetObjectID(10000);
	object:SetXPosition(175, 0);
	object:SetYPosition(118, 0);
	object:SetContext(contexts["interior-c"]);
	treasure_container = object:GetTreasureContainer();
	treasure_container:AddDrunes(275);
	treasure_container:AddObject(1, 2);
	ObjectManager:AddObject(object);
end



function CreateSprites()
	IfPrintDebug(DEBUG, "Creating sprites...");

	local sprite;
	local sprite_id;

	sprite = ConstructSprite("Claudius", 1, 184, 114);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["interior-c"]);
	sprites["claudius"] = sprite;

	-- Guards at town gates
	sprite_id = 20;
	sprite = ConstructSprite("Knight01", sprite_id, 92, 202);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["exterior"]);
	sprites["town-gate-guard-left"] = sprite;
	sprite_id = sprite_id + 1;

	sprite = ConstructSprite("Knight01", sprite_id, 104, 202);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["exterior"]);
	sprites["town-gate-guard-right"] = sprite;
	sprite_id = sprite_id + 1;

	-- Walking along main road
	sprite_id = 40;
	sprite = ConstructSprite("Knight01", sprite_id, 100, 182);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["exterior"]);
	sprites["main-road-patrol"] = sprite;
	sprite_id = sprite_id + 1;

	sprite = ConstructSprite("Man01", sprite_id, 94, 112);
	sprite:SetDirection(hoa_map.MapMode.WEST);
	sprite:SetContext(contexts["exterior"]);
	sprites["main-road-civilian"] = sprite;
	sprite_id = sprite_id + 1;

	-- Market area
	sprite = ConstructSprite("FemaleMerchant01", sprite_id, 112, 136);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["exterior"]);
	sprites["market-merchant"] = sprite;
	sprite_id = sprite_id + 1;

	sprite_id = 60;
	sprite = ConstructSprite("Laila", sprite_id, 120, 144);
	sprite:SetDirection(hoa_map.MapMode.WEST);
	sprite:SetContext(contexts["exterior"]);
	sprites["laila"] = sprite;
	sprite_id = sprite_id + 1;

	sprite = ConstructSprite("Man01", sprite_id, 134, 145);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetContext(contexts["exterior"]);
	sprite_id = sprite_id + 1;

	sprite = ConstructSprite("Man01", sprite_id, 128, 138);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["exterior"]);
	sprite_id = sprite_id + 1;

	sprite = ConstructSprite("Man01", sprite_id, 107, 152);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetContext(contexts["exterior"]);
	sprite_id = sprite_id + 1;

	-- Graveyard area
	sprite_id = 80;
	sprite = ConstructSprite("Knight01", sprite_id, 165, 102);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["exterior"]);
	sprites["mark"] = sprite;
	sprite_id = sprite_id + 1;

	sprite = ConstructSprite("Man01", sprite_id, 180, 102);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["exterior"]);
	sprite_id = sprite_id + 1;

	-- Around buildings
	sprite_id = 100;
	sprite = ConstructSprite("Marcus", sprite_id, 21, 160);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetStationaryMovement(true);
	sprites["marcus"] = sprite;
	sprite_id = sprite_id + 1;

	sprite = ConstructSprite("Man01", sprite_id, 119, 125);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["exterior"]);
 	sprite:SetStationaryMovement(true);
	sprite_id = sprite_id + 1;

	sprite = ConstructSprite("Man01", sprite_id, 59, 185);
	sprite:SetDirection(hoa_map.MapMode.WEST);
	sprite:SetContext(contexts["exterior"]);
	sprite:SetStationaryMovement(true);
	sprite_id = sprite_id + 1;

	sprite = ConstructSprite("Man01", sprite_id, 159, 182);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["exterior"]);
	sprite_id = sprite_id + 1;

	-- Sprites inside the inn, shops, or pub
	sprite_id = 120;
	sprite = ConstructSprite("Woman02", sprite_id, 121, 163);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior-a"]);
	sprites["inn-keeper"] = sprite;
	sprite_id = sprite_id + 1;

	sprite = ConstructSprite("Woman02", sprite_id, 113, 175);
	sprite:SetDirection(hoa_map.MapMode.WEST);
	sprite:SetContext(contexts["interior-a"]);
	sprites["inn-worker-1"] = sprite;
	sprite_id = sprite_id + 1;

	sprite = ConstructSprite("Woman01", sprite_id, 142, 164);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior-c"]);
	sprite:SetStationaryMovement(true);
	sprites["inn-worker-2"] = sprite;
	sprite_id = sprite_id + 1;

	sprite = ConstructSprite("FemaleMerchant01", sprite_id, 71, 170);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetContext(contexts["interior-b"]);
	sprites["item-merchant"] = sprite;
	sprite_id = sprite_id + 1;

	sprite = ConstructSprite("Man01", sprite_id, 147, 140);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["interior-b"]);
	sprites["weapon-merchant"] = sprite;
	sprite_id = sprite_id + 1;

	sprite = ConstructSprite("Man02", sprite_id, 145, 148);
	sprite:SetDirection(hoa_map.MapMode.WEST);
	sprite:SetContext(contexts["interior-b"]);
	sprites["weapon-shopper"] = sprite;
	sprite_id = sprite_id + 1;

	sprite = ConstructSprite("Man01", sprite_id, 57, 116);
	sprite:SetDirection(hoa_map.MapMode.WEST);
	sprite:SetContext(contexts["interior-b"]);
	sprites["bartender"] = sprite;
	sprite_id = sprite_id + 1;

	sprite = ConstructSprite("Man01", sprite_id, 53, 112);
	sprite:SetDirection(hoa_map.MapMode.EAST);
	sprite:SetContext(contexts["interior-b"]);
	sprite_id = sprite_id + 1;

	sprite = ConstructSprite("Man01", sprite_id, 48, 117);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["interior-b"]);
	sprite_id = sprite_id + 1;

	sprite = ConstructSprite("Man01", sprite_id, 41, 109);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior-b"]);
	sprite_id = sprite_id + 1;

	-- Inside of homes
	sprite_id = 140;
	sprite = ConstructSprite("Vanica", 2, 173, 114);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior-a"]);
	sprites["vanica"] = sprite;

	-- TODO: add more sprites inside homes

	-- Near and around the castle
	sprite_id = 160;
	sprite = ConstructSprite("Knight01", sprite_id, 57, 71);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["exterior"]);
	sprite_id = sprite_id + 1;

	sprite = ConstructSprite("Knight01", sprite_id, 139, 71);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["exterior"]);
	sprite_id = sprite_id + 1;

	-- Inside the left side of the castle
	sprite_id = 180;
	-- TODO

	-- Inside the right side of the castle
	sprite_id = 200;
	-- TODO

	-- Near and inside the throne room
	sprite_id = 220;
	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 96.5, 63);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["exterior"]);
	sprite_id = sprite_id + 1;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 99.5, 63);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["exterior"]);
	sprite_id = sprite_id + 1;

	sprite = ConstructSprite("Knight01", sprite_id, 99, 38);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["interior-a"]);
	sprites["king"] = sprite;
	sprite_id = sprite_id + 1;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 93.5, 37.5);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["interior-a"]);
	sprite_id = sprite_id + 1;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 102.5, 37.5);
	sprite:SetDirection(hoa_map.MapMode.SOUTH);
	sprite:SetContext(contexts["interior-a"]);
	sprite_id = sprite_id + 1;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 89, 48);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior-a"]);
	sprite_id = sprite_id + 1;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 92, 48);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior-a"]);
	sprite_id = sprite_id + 1;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 95, 48);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior-a"]);
	sprite_id = sprite_id + 1;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 90, 52);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior-a"]);
	sprite_id = sprite_id + 1;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 94, 52);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior-a"]);
	sprite_id = sprite_id + 1;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 89, 56);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior-a"]);
	sprite_id = sprite_id + 1;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 92, 56);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior-a"]);
	sprite_id = sprite_id + 1;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 95, 56);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior-a"]);

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 101, 48);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior-a"]);
	sprite_id = sprite_id + 1;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 104, 48);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior-a"]);
	sprite_id = sprite_id + 1;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 107, 48);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior-a"]);
	sprite_id = sprite_id + 1;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 102, 52);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior-a"]);
	sprite_id = sprite_id + 1;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 106, 52);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior-a"]);
	sprite_id = sprite_id + 1;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 101, 56);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior-a"]);
	sprite_id = sprite_id + 1;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 104, 56);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior-a"]);
	sprite_id = sprite_id + 1;

	sprite_id = sprite_id + 1; sprite = ConstructSprite("Knight01", sprite_id, 107, 56);
	sprite:SetDirection(hoa_map.MapMode.NORTH);
	sprite:SetContext(contexts["interior-a"]);
	sprite_id = sprite_id + 1;
end -- function CreateSprites()


-- This is done outside of CreateDialogues() so that both events and dialogues can reference the key dialogue ids
function CreateDialogueReferences()
	dialogues["leave-home-part1"] = 1;
	dialogues["leave-home-part2"] = 2;
	dialogues["enter-barracks"] = 10;
end



function CreateDialogues()
	IfPrintDebug(DEBUG, "Creating dialogues...");

	local dialogue;
	local text;

	----------------------------------------------------------------------------
	---------- Dialogues triggered by events
	----------------------------------------------------------------------------
	dialogue = hoa_map.MapDialogue.Create(dialogues["leave-home-part1"]);
		text = hoa_system.Translate("Oh, Claudius are you heading out now?");
		dialogue:AddLine(text, sprites["vanica"]:GetObjectID());

	dialogue = hoa_map.MapDialogue.Create(dialogues["leave-home-part2"]);
		text = hoa_system.Translate("Yes. There is a ceremony this afternoon for the expedition force. I need to head to the castle barracks and prepare.");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());
		text = hoa_system.Translate("Alright then. If you see your father and sister around town, tell them to be home at dusk for supper. Make sure you present your best self in front of his majesty.");
		dialogue:AddLine(text, sprites["vanica"]:GetObjectID());

	dialogue = hoa_map.MapDialogue.Create(dialogues["enter-barracks"]);
		text = hoa_system.Translate("Claudius, you're late.");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());

	----------------------------------------------------------------------------
	---------- Dialogues attached to characters
	----------------------------------------------------------------------------
	dialogue = hoa_map.MapDialogue.Create(1000);
		text = hoa_system.Translate("Oh, hello Claudius. What's the matter?");
		dialogue:AddLine(text, sprites["laila"]:GetObjectID());
		text = hoa_system.Translate("It's...nothing. I'm just glad you're okay.");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());
		text = hoa_system.Translate("Brother. I'm glad you're safe too.");
		dialogue:AddLine(text, sprites["laila"]:GetObjectID());
	sprites["laila"]:AddDialogueReference(1000);

	dialogue = hoa_map.MapDialogue.Create(1001);
		text = hoa_system.Translate("Oh dear. Preparing meals for this family was enough work. Doing so for our entire neighboorhood is nearly impossible.");
		dialogue:AddLine(text, sprites["vanica"]:GetObjectID());
	sprites["vanica"]:AddDialogueReference(1001);

	dialogue = hoa_map.MapDialogue.Create(1002);
		text = hoa_system.Translate("Your mother and I are doing what we can for those who lost their homes in the attack.");
		dialogue:AddLine(text, sprites["marcus"]:GetObjectID());
		text = hoa_system.Translate("Let me help. Show me where I can make myself useful.");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());
		text = hoa_system.Translate("No, you need to take it easy. We may be attacked again you know, and how are you going to defend our city if you're exhausted?");
		dialogue:AddLine(text, sprites["marcus"]:GetObjectID());
	sprites["marcus"]:AddDialogueReference(1002);

	dialogue = hoa_map.MapDialogue.Create(1003);
		text = hoa_system.Translate("This inn converted into a shelter after the attack. We're completely full, so please find alternative lodging arrangements.");
		dialogue:AddLine(text, sprites["inn-keeper"]:GetObjectID());
	sprites["inn-keeper"]:AddDialogueReference(1003);

	dialogue = hoa_map.MapDialogue.Create(1004);
		text = hoa_system.Translate("There's so much work to do every day with this many guests. I'm exhausted.");
		dialogue:AddLine(text, sprites["inn-worker-2"]:GetObjectID());
	sprites["inn-worker-2"]:AddDialogueReference(1004);

	dialogue = hoa_map.MapDialogue.Create(1005);
		text = hoa_system.Translate("Most of my inventory was destroyed in the attack, but feel free to take a look.");
		dialogue:AddLine(text, sprites["item-merchant"]:GetObjectID());
		dialogue:AddLineEventAtEnd(event_sequences["item_shop"]);
	sprites["item-merchant"]:AddDialogueReference(1005);

	dialogue = hoa_map.MapDialogue.Create(1006);
		text = hoa_system.Translate("Demand has skyrocketed after our city was attacked. I'm sold out of most of my armaments, but I have a few selections remaining.");
		dialogue:AddLine(text, sprites["weapon-merchant"]:GetObjectID());
		dialogue:AddLineEventAtEnd(event_sequences["armory_shop"]);
	sprites["weapon-merchant"]:AddDialogueReference(1006);
end -- function CreateDialogues()


-- Creates all events and all event sequence chains
function CreateEvents()
	IfPrintDebug(DEBUG, "Creating events...");

	local event = {};
	local event_id;

	-- Once Claudius first leaves his home, a short dialogue scene occurs with his mother
	event_sequences["leave-home"], event_id = 10, 10;
	event = hoa_map.PushMapStateEvent.Create(event_id, hoa_map.MapMode.STATE_SCENE);
	event:AddEventLinkAtStart(event_id + 1);
	event:AddEventLinkAtStart(event_id + 2, 150);
	event_id = event_id + 1;

	event = hoa_map.CameraMoveEvent.Create(event_id, 173, 120, 400);
	event:SetCameraContext(contexts["interior-a"]);
	event:AddEventLinkAtEnd(event_id + 2);
	event_id = event_id + 1;

	event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["vanica"]);
	event:Direction(hoa_map.MapMode.SOUTH);
	event_id = event_id + 1;

	event = hoa_map.DialogueEvent.Create(event_id, dialogues["leave-home-part1"]);
	event:SetStopCameraMovement(true);
	event:AddEventLinkAtEnd(event_id + 1);
	event:AddEventLinkAtEnd(event_id + 2);
	event_id = event_id + 1;

	event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["claudius"]);
	event:Direction(hoa_map.MapMode.NORTH);
	event_id = event_id + 1;

	event = hoa_map.DialogueEvent.Create(event_id, dialogues["leave-home-part2"]);
	event:AddEventLinkAtEnd(event_id + 1);
	event:AddEventLinkAtEnd(event_id + 2, 150);
	event:AddEventLinkAtEnd(event_id + 3);
	event_id = event_id + 1;

	event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["vanica"]);
	event:Direction(hoa_map.MapMode.NORTH);
	event_id = event_id + 1;

	event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["claudius"]);
	event:Direction(hoa_map.MapMode.SOUTH);
	event_id = event_id + 1;

	event = hoa_map.CameraMoveEvent.Create(event_id, sprites["claudius"], 400);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1;

	event = hoa_map.PopMapStateEvent.Create(event_id);
	event_id = event_id + 1;

	-- Upon entering the barracks, a dialogue begins and the scene fades to the throne room to hear the king speak
	event_sequences["enter-barracks"], event_id = 30, 30;
	event = hoa_map.PushMapStateEvent.Create(event_id, hoa_map.MapMode.STATE_SCENE);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1;

	event = hoa_map.DialogueEvent.Create(event_id, dialogues["enter-barracks"]);

	-- TODO: Hearing the legend from the king


	-- TODO: Back home at night talking with family about the mission


	-- TODO: King's proclamation speech from the balcony

	---------- Miscellaneous Events
	event_sequences["pop_state"] = 10000;
	event = hoa_map.PopMapStateEvent.Create(event_sequences["pop_state"]);

	-- Leave the map and go to the sand dock
	event_sequences["transition-to-dock"] = 10001;
	event = hoa_map.MapTransitionEvent.Create(event_sequences["transition-to-dock"], "lua/scripts/maps/a01_sand_dock_departure.lua", 0);

	event_sequences["item_shop"] = 10002;
	event = hoa_map.ShopEvent.Create(event_sequences["item_shop"]);
	event:AddWare(1, 4); -- healing potions

	event_sequences["armory_shop"] = 10003;
	event = hoa_map.ShopEvent.Create(event_sequences["armory_shop"]);
	event:AddWare(10002, 1); -- iron sword
	event:AddWare(20001, 2); -- karlate helm
	event:AddWare(30001, 3); -- leather chain mail
	event:AddWare(30002, 1); -- karlate breast plate

end -- function CreateEvents()


----------------------------------------------------------------------------
---------- Update Functions
----------------------------------------------------------------------------

function Update()
	-- Process all notification events that we care about
	local index = 0;
	local notification = {};

	while (true) do
		notification = NotificationManager:GetNotificationEvent(index);
		if (notification == nil) then
			break;
		elseif (notification.category == "map" and notification.event == "collision") then
			HandleCollisionNotification(notification);
		elseif (notification.category == "map" and notification.event == "camera-zone") then
			HandleCameraZoneNotification(notification);
		end

		index = index + 1;
	end

	-- Check map zones for necessary actions
-- 	if (GlobalRecords:GetRecord("left_home") ~= 1) then
-- 		if (zones["leave-home"]:IsPlayerSpriteEntering() == true) then
-- 			GlobalRecords:SetRecord("left_home", 1);
-- 			EventManager:StartEvent(event_sequences["leave-home"]);
-- 		end
-- 	end
end


-- Processes collision notifications and takes appropriate action depending on the type and location of the collision
function HandleCollisionNotification(notification)
	-- We're only concerned with collisions by the player sprite for this map
	local sprite = notification.sprite;
	if (sprite:GetObjectID() ~= Map:GetPlayerSprite():GetObjectID()) then
		return;
	elseif (notification.collision_type == hoa_map.MapMode.OBJECT_COLLISION) then
		return;
	end

	-- Determine the positions of each side of the sprite's collision rectangle
	local x_left = RoundToInteger(notification.x_position + notification.x_offset - sprite:GetCollHalfWidth());
	local x_right = RoundToInteger(notification.x_position + notification.x_offset + sprite:GetCollHalfWidth());
	local y_top = RoundToInteger(notification.y_position + notification.y_offset - sprite:GetCollHeight());
	local y_bottom = RoundToInteger(notification.y_position + notification.y_offset);
	--print ("Collision box: " .. x_left .. "/" .. x_right .. ", " .. y_top .. "/" .. y_bottom);

	-- Collisions should now be checked to see if they should start a context switch
	if (sprite:GetContext() == contexts["exterior"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			if (y_top == 68 and x_left >= 92 and x_right <= 104) then
				EventManager:StartEvent(event_sequences["transition-to-dock"]);

			-- There are a lot of south-facing doors in this context. The list below are the coordinates for every reachable door, starting from
			-- the top left of the map and going across and down. Doors blocked by debris are not included in this list

			-- Castle doors
			elseif (y_top == 68 and x_left >= 22 and x_right <= 24) then
				SpriteCameraContextTransition(sprite, contexts["interior-b"], 0, -2.5, true, 0);
			elseif (y_top == 70 and x_left >= 72 and x_right <= 76) then
				SpriteCameraContextTransition(sprite, contexts["interior-b"], 0, -2.5, true, 0);
			elseif (y_top == 60 and x_left >= 96 and x_right <= 100) then
				SpriteCameraContextTransition(sprite, contexts["interior-a"], 0, -2.5, true, 0);
			elseif (y_top == 70 and x_left >= 120 and x_right <= 124) then
				SpriteCameraContextTransition(sprite, contexts["interior-b"], 0, -2.5, true, 0);
			elseif (y_top == 68 and x_left >= 172 and x_right <= 174) then
				SpriteCameraContextTransition(sprite, contexts["interior-b"], 0, -2.5, true, 0);

			-- City structures top row
			elseif (y_top == 127 and x_left > 24 and x_right <= 28) then
				SpriteCameraContextTransition(sprite, contexts["interior-a"], 0, -2, true, 0);
			elseif (y_top == 125 and x_left >= 50 and x_right <= 54) then
				-- Enter pub
				SpriteCameraContextTransition(sprite, contexts["interior-b"], 0, -2, true, 0);
			elseif (y_top == 125 and x_left >= 148 and x_right <= 152) then
				SpriteCameraContextTransition(sprite, contexts["interior-d"], 0, -2, true, 0);
			elseif (y_top == 129 and x_left >= 170 and x_right <= 174) then
				-- Enter Claudius' home
				SpriteCameraContextTransition(sprite, contexts["interior-a"], 0, -2, true, 0);

			--- City structures middle row
			elseif (y_top == 155 and x_left >= 46 and x_right <= 50) then
				SpriteCameraContextTransition(sprite, contexts["interior-e"], 0, -2, true, 0);
			elseif (y_top == 155 and x_left >= 148 and x_right <= 152) then
				-- Enter weapon/armor shop
				SpriteCameraContextTransition(sprite, contexts["interior-b"], 0, -2, true, 0);

			-- City structures bottom row
			elseif (y_top == 177 and x_left >= 80 and x_right <= 84) then
				-- Enter item shop
				SpriteCameraContextTransition(sprite, contexts["interior-b"], 0, -2, true, 0);
			elseif (y_top == 183 and x_left >= 118 and x_right <= 122) then
				-- Enter inn main entrance
				SpriteCameraContextTransition(sprite, contexts["interior-a"], 0, -2, true, 0);
			elseif (y_top == 180 and x_left >= 139 and x_right <= 143) then
				-- Enter inn back entrance
				SpriteCameraContextTransition(sprite, contexts["interior-a"], 0, -2, true, 0);
			end

		elseif (sprite:IsFacingDirection(hoa_map.MapMode.EAST)) then
			-- Castle Balcony, right side entrance
			if (x_right <= 112 and y_top >= 60 and y_bottom <= 66) then
				SpriteCameraContextTransition(sprite, contexts["interior-b"], 2.5, 0, true, 0);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.WEST)) then
			-- Castle Balcony, left side entrance
			if (x_left == 84 and y_top >= 60 and y_bottom <= 66) then
				SpriteCameraContextTransition(sprite, contexts["interior-b"], -2.5, 0, true, 0);
			end

		end

	elseif (sprite:GetContext() == contexts["interior-a"]) then
		-- Taking staircases up or down a level
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			-- TODO: determine if player will have access to the staircases to climb the towers
			if (y_top == 108 and x_left >= 10 and x_right <= 14) then
				SpriteCameraContextTransition(sprite, contexts["interior-c"], 0, -1, true, hoa_map.MapMode.SOUTH);
			elseif (y_top == 110 and x_left >= 164 and x_right <= 168) then
				SpriteCameraContextTransition(sprite, contexts["interior-c"], 0, -1, true, hoa_map.MapMode.SOUTH);
			-- TODO: the below statement is for the first floor of the inn. The y_top should actually be 160, but the collision doesn't trigger there.
			-- This is a bug in the map collision code, not this script. Revert to 160 when the bug is fixed
			elseif (y_top == 159 and x_left >= 126 and x_right <= 130) then
				SpriteCameraContextTransition(sprite, contexts["interior-c"], 0, -1, true, hoa_map.MapMode.SOUTH);
			end

		-- Exiting structures to the outside context
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.SOUTH)) then
			if (y_bottom == 60 and x_left >= 96 and x_right <= 100) then
				-- Leave throne room
				SpriteCameraContextTransition(sprite, contexts["exterior"], 0, 2.5, true, 0);
			elseif (y_bottom == 128 and x_left >= 24 and x_right <= 28) then
				SpriteCameraContextTransition(sprite, contexts["exterior"], 0, 2, true, 0);
			elseif (y_bottom == 130 and x_left >= 170 and x_right <= 174) then
				-- Leave Claudius' home
				SpriteCameraContextTransition(sprite, contexts["exterior"], 0, 2, true, 0);
			elseif (y_bottom == 184 and x_left >= 118 and x_right <= 122) then
				-- Leave inn main entrance
				SpriteCameraContextTransition(sprite, contexts["exterior"], 0, 2, true, 0);
			elseif (y_bottom == 180 and x_left >= 139 and x_right <= 143) then
				-- Leave inn side entrance
				SpriteCameraContextTransition(sprite, contexts["exterior"], 0, 2, true, 0);
			end
		end

	elseif (sprite:GetContext() == contexts["interior-b"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			if (y_top == 43 and x_left >= 66 and x_right <= 70) then
				-- TODO: upstairs left tower floor 1
			elseif (y_top == 37 and x_left >= 120 and x_right <= 124) then
				-- TODO: upstairs right tower floor 2
			elseif (y_top == 37 and x_left >= 126 and x_right <= 130) then
				-- TODO: downstairs right tower floor 2
			elseif (y_top == 103 and x_left >= 28 and x_right <= 32) then
				-- TODO: upstairs top left town building
			end

		elseif (sprite:IsFacingDirection(hoa_map.MapMode.SOUTH)) then
			if (y_bottom == 68 and x_left >= 22 and x_right <= 24) then
				SpriteCameraContextTransition(sprite, contexts["exterior"], 0, 2.5, true, 0);
			elseif (y_bottom == 70 and x_left >= 72 and x_right <= 76) then
				SpriteCameraContextTransition(sprite, contexts["exterior"], 0, 2.5, true, 0);
			elseif (y_bottom == 126 and x_left >= 50 and x_right <= 54) then
				-- Leave the pub
				SpriteCameraContextTransition(sprite, contexts["exterior"], 0, 2, true, 0);
			elseif (y_bottom == 156 and x_left >= 148 and x_right <= 152) then
				SpriteCameraContextTransition(sprite, contexts["exterior"], 0, 2, true, 0);
			elseif (y_bottom == 178 and x_left >= 80 and x_right <= 84) then
				SpriteCameraContextTransition(sprite, contexts["exterior"], 0, 2, true, 0);
			end

		elseif (sprite:IsFacingDirection(hoa_map.MapMode.EAST)) then
			if (x_right == 84 and y_top >= 60 and y_bottom <= 66) then
				SpriteCameraContextTransition(sprite, contexts["exterior"], 2.5, 0, true, 0);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.WEST)) then
			if (x_left == 112 and y_top >= 60 and y_bottom <= 66) then
				SpriteCameraContextTransition(sprite, contexts["exterior"], -2.5, 0, true, 0);
			end
		end

	elseif (sprite:GetContext() == contexts["interior-c"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
-- 			if (y_top == 37 and x_left >= 66 and x_right <= 70) then
-- 				-- TODO: upstairs left tower floor 2
-- 			elseif (y_top == 37 and x_left >= 72 and x_right <= 76) then
-- 				-- TODO: downstairs left tower floor 2
-- 			elseif (y_top == 43 and x_left >= 120 and x_right <= 124) then
-- 				-- TODO: upstairs right tower floor 1
-- 			elseif (y_top == 103 and x_left >= 28 and x_right <= 32) then
-- 				-- TODO: downstairs top left town building
-- 			elseif (y_top == 105 and x_left >= 160 and x_right <= 164) then
-- 				-- TODO: SpriteContextTransition("downstairs-building-e", sprite);
-- 			elseif (y_top == 159 and x_left >= 126 and x_right <= 130) then
-- 				-- TODO: SpriteContextTransition("downstairs-building-n", sprite);
-- 			end

			if (y_top == 106 and x_left >= 10 and x_right <= 14) then
				SpriteCameraContextTransition(sprite, contexts["interior-a"], 0, 2.5, true, hoa_map.MapMode.SOUTH);
			elseif (y_top == 108 and x_left >= 164 and x_right <= 168) then
				SpriteCameraContextTransition(sprite, contexts["interior-a"], 0, 2.5, true, hoa_map.MapMode.SOUTH);
			elseif (y_top == 108 and x_left >= 170 and x_right <= 174) then
				-- Go to roof of Claudius' home
				SpriteCameraContextTransition(sprite, contexts["exterior"], 183, 116, false, hoa_map.MapMode.WEST);
			-- TODO: the below statement is for the first floor of the inn. The y_top should actually be 158, but the collision doesn't trigger there.
			-- This is a bug in the map collision code, not this script. Revert to 158 when the bug is fixed
			elseif (y_top == 157 and x_left >= 126 and x_right <= 130) then
				SpriteCameraContextTransition(sprite, contexts["interior-a"], 0, 2.5, true, hoa_map.MapMode.SOUTH);
			elseif (y_top == 158 and x_left >= 134 and x_right <= 138) then
				SpriteCameraContextTransition(sprite, contexts["exterior"], 130, 167, false, hoa_map.MapMode.SOUTH);
			end


		end
	elseif (sprite:GetContext() == contexts["interior-d"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			if (y_top == 31 and x_left >= 126 and x_right <= 130) then
				-- TODO SpriteContextTransition("downstairs-3-right-tower", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.SOUTH)) then
			if (y_bottom == 126 and x_left >= 148 and x_right <= 152) then
				SpriteCameraContextTransition(sprite, contexts["exterior"], 0, 2, true, 0);
			end
		end
	elseif (sprite:GetContext() == contexts["interior-e"]) then
		if (sprite:IsFacingDirection(hoa_map.MapMode.NORTH)) then
			if (y_top == 31 and x_left >= 72 and x_right <= 76) then
				-- TODO SpriteContextTransition("downstairs-3-left-tower", sprite);
			end
		elseif (sprite:IsFacingDirection(hoa_map.MapMode.SOUTH)) then
			if (y_bottom == 156 and x_left >= 46 and x_right <= 50) then
				SpriteCameraContextTransition(sprite, contexts["exterior"], 0, 2, true, 0);
			end
		end
	end
end


-- Processes collision notifications and takes appropriate action for camera zone entry/exit changes
function HandleCameraZoneNotification(notification)
	local zone = notification.zone;

	if (zone:GetZoneID() == zones["leave-home"]:GetZoneID() and zone:IsPlayerSpriteEntering() == true and GlobalRecords:GetRecord("left_home") ~= 1) then
		GlobalRecords:SetRecord("left_home", 1);
		sprites["claudius"]:SetMoving(false);
		EventManager:StartEvent(event_sequences["leave-home"]);
	elseif (zone:GetZoneID() == zones["barracks-entry"]:GetZoneID() and zone:IsPlayerSpriteEntering() == true and GlobalRecords:GetRecord("throne-room-scene") ~= 1) then
		GlobalRecords:SetRecord("throne-room-scene", 1);
		-- EventManager:StartEvent(event_sequences["leave-home"]);
	end
end


--! \brief Initiates necessary actions for the sprite pointed to by the map camera to transition from one context on the map to another
--! \param sprite A pointer to the sprite making the transition
--! \param new_context The context that the sprite is transitioning to
--! \param x The new x position for the sprite, including the offset value (Example: 25.7)
--! \param y The new y position for the sprite, including the offset value (Example: 25.7)
--! \param relative_position Boolean. If true, x/y position is relative change from current position
--! \param new_direction New direction that the sprite should be facing. Zero indicates no direction change
--! \note X/Y positions should only be negative if the position change is relative
function SpriteCameraContextTransition(sprite, new_context, x, y, relative_position, new_direction)
	TransitionManager:SetContextCameraChanges(sprite, x, y, relative_position, new_direction);
	TransitionManager:StartContextTransition(new_context);
end

----------------------------------------------------------------------------
---------- Draw Functions
----------------------------------------------------------------------------

function Draw()
	Map:DrawMapLayers();
end

----------------------------------------------------------------------------
---------- Event Functions
----------------------------------------------------------------------------
