--------------------------------------------------------------------------------
-- a01_unblock_underground_river.lua
--
-- Main storyline event. The first dungeon encountered in the game, the player
-- makes his way through a cave to a riverbed, where an enemy boss is encountered.
--------------------------------------------------------------------------------
local ns = {}
setmetatable(ns, {__index = _G})
a01_unblock_underground_river = ns;
setfenv(1, ns);

-- Set to true to turn on debugging messages generated by this map script
DEBUG = false;

data_file = "lua/data/maps/harrvah_underground_river_cave.lua";
location_filename = "img/portraits/locations/desert_cave.png"
map_name = "River Access Cave"

sound_filenames = {};

music_filenames = {};
music_filenames[1] = "mus/Cave2.ogg";

-- Primary Map Classes
Map = {};
LocalRecords = {};
GlobalRecords = {};
DialogueManager = {};
EventManager = {};
ObjectManager = {};
TileManager = {};
TreasureManager = {};
TransitionManager= {};

enemy_ids = { 1, 2, 3, 4, 5, 6 }

-- Containers used to hold references or IDs to various objects.
contexts = {};
zones = {};
objects = {};
sprites = {};
dialogues = {};
event_sequences = {};

-- All custom map functions are contained within the following table.
-- String keys in this table serves as the names of these functions.
functions = {};

-- Shorthand names for map contexts
contexts["base"] = hoa_map.MapMode.CONTEXT_01; -- Upon first entering the cave
contexts["collapsed"] = hoa_map.MapMode.CONTEXT_02; -- Active context after the passage collapse event
contexts["unblocked"] = hoa_map.MapMode.CONTEXT_03; -- Active context after the river obstruction has been removed

-- Define the possible load points for this map
load_points = {};
load_points[-1] = "Debug: right after the initial dialogue scene";
load_points[-2] = "Debug: before seeing the the corpse";
load_points[-3] = "Debug: before the passage collapse scene";
load_points[-4] = "Debug: before entering the passage through the northern wall";
load_points[-5] = "Debug: before arriving at the riverbed";
load_points[-6] = "Debug: after defeating the boss";
load_points[0] = "Entering from opening_scene map (new game)";
load_points[100] = "Save point: before the riverbed";



function Load(m)
	-- Setup global pointers for the MapMode instance as well as the various supervisors for convenience
	Map = m;
	LocalRecords = Map.local_record_group;
	GlobalRecords = Map.global_record_group;
	DialogueManager = Map.dialogue_supervisor;
	EventManager = Map.event_supervisor;
	ObjectManager = Map.object_supervisor;
	TileManager = Map.tile_supervisor;
	TransitionManager = Map.transition_supervisor;
	TreasureManager = Map.treasure_supervisor;

	-- Setup the order in which we wish to draw the tile and object layers
	Map:ClearLayerOrder();
	Map:AddTileLayerToOrder(0);
	Map:AddTileLayerToOrder(1);
	Map:AddObjectLayerToOrder(0);
	Map:AddTileLayerToOrder(2);

	CreateZones();
	CreateObjects();
	CreateSprites();
	CreateEnemies();
	CreateDialogueReferences();
	CreateEvents();
	CreateDialogues();

	-- Visual effects: dark lighting, various light halos
	VideoManager:EnableLightOverlay(hoa_video.Color(0.0, 0.0, 0.0, 0.5));

	Map:SetCurrentTrack(0);

	Map.unlimited_stamina = false;
	Map:ShowStaminaBar(true);
	Map:ShowDialogueIcons(true);

	-- Spawn all enemies for each enemy zone
	zones["enemy01"]:ForceSpawnAllEnemies();
	zones["enemy02"]:ForceSpawnAllEnemies();
	zones["enemy03"]:ForceSpawnAllEnemies();
	zones["enemy04"]:ForceSpawnAllEnemies();
	zones["enemy05"]:ForceSpawnAllEnemies();
	zones["enemy06"]:ForceSpawnAllEnemies();
	zones["enemy07"]:ForceSpawnAllEnemies();

	LaunchLoadPoint(Map.load_point);

	IfPrintDebug(DEBUG, "Map loading complete");
end -- function Load(m)



function LaunchLoadPoint(load_point)
	IfPrintDebug(DEBUG, "Launching load point...");

	-- Make sure the load point for the map matches one of the defined values
	local point_valid = false;
	for id in pairs(load_points) do
		if (load_point == id) then
			point_valid = true;
			break;
		end
	end

	if (point_valid == false) then
		IfPrintDebug(true, "WARNING: map tried to launch with unknown load point: " .. load_point);
		return;
	end

	-- Common launch settings
	Map:SetPlayerSprite(sprites["claudius"]);
	Map:SetCamera(sprites["claudius"]);

	-- Load-point specific settings
	if (load_point == 0) then
		-- The map begins with an opening scene before control is given to the player
		Map:MoveVirtualFocus(80, 130);
		Map:PushState(hoa_map.MapMode.STATE_SCENE);
		EventManager:StartEvent(event_sequences["entrance"], 2500);
	elseif (load_point == 100) then
		sprites["claudius"]:SetPosition(11, 190);
		sprites["mark"].visible = false;
		sprites["lukar"].visible = false;
		sprites["claudius"].collidable = true;
		functions["SwitchContextCollapsed"]();
	elseif (load_point == -1) then
		DEBUG = true;
		sprites["claudius"]:SetPosition(13, 210);
		sprites["mark"].visible = false;
		sprites["lukar"].visible = false;
		sprites["claudius"].collidable = true;
	elseif (load_point == -2) then
		DEBUG = true;
		sprites["claudius"]:SetPosition(166, 135);
		sprites["mark"].visible = false;
		sprites["lukar"].visible = false;
		sprites["claudius"].collidable = true;
	elseif (load_point == -3) then
		DEBUG = true;
		sprites["claudius"]:SetPosition(152, 70);
		sprites["mark"].visible = false;
		sprites["lukar"].visible = false;
		sprites["claudius"].collidable = true;
	elseif (load_point == -4) then
		DEBUG = true;
		sprites["claudius"]:SetPosition(75, 8);
		sprites["mark"].visible = false;
		sprites["lukar"].visible = false;
		sprites["claudius"].collidable = true;
	elseif (load_point == -5) then
		DEBUG = true;
		sprites["claudius"]:SetPosition(215, 6);
		sprites["mark"].visible = false;
		sprites["lukar"].visible = false;
		sprites["claudius"].collidable = true;
		-- TODO: process the collapse scene so we are in the proper context and triggers are not set
		functions["SwitchContextCollapsed"]();
	elseif (load_point == -6) then
		-- TODO
	else
		IfPrintDebug(true, "WARNING: map launched with a valid load point that had no instructions: " .. load_point);
	end
end -- function LaunchLoadPoint()



function Update()
	if (GlobalRecords:DoesRecordExist("corpse_seen") == false) then
		if (zones["corpse_discovery"]:IsPlayerSpriteEntering() == true) then
			GlobalRecords:AddNewRecord("corpse_seen", 1);
			EventManager:StartEvent(event_sequences["find_corpse"]);
		end
	end

	if (GlobalRecords:DoesRecordExist("passage_collapsed") == false) then
		if (zones["prevent_long_route"]:IsPlayerSpriteEntering() == true and Map:CurrentState() == hoa_map.MapMode.STATE_EXPLORE) then
			EventManager:StartEvent(event_sequences["follow_short_route"]);
		end
	end

--	if (zones["short_route"]:IsCameraEntering() == true) then
--		if (GlobalRecords:DoesRecordExist("knight_moved") == false) then
--			GlobalRecords:AddNewRecord("knight_moved", 1);
--			EventManager:StartEvent(event_sequences["observe_passing"]);
--		end
--	end

	if (GlobalRecords:DoesRecordExist("passage_collapsed") == false) then
		if (zones["collapse"]:IsPlayerSpriteEntering() == true) then
			GlobalRecords:AddNewRecord("passage_collapsed", 1);
			EventManager:StartEvent(event_sequences["passage_collapse"]);
		end
	end

	if ((zones["forward_passage"]:IsPlayerSpriteEntering() == true) and (Map.player_sprite.visible == true)) then
		EventManager:StartEvent(event_sequences["pass_wall_forward"]);
	end

	if ((zones["backward_passage"]:IsPlayerSpriteEntering() == true) and (Map.player_sprite.visible == true)) then
		EventManager:StartEvent(event_sequences["pass_wall_backward"]);
	end

	if (GlobalRecords:DoesRecordExist("spring_discovered") == false) then
		if ((zones["spring_discovery"]:IsPlayerSpriteEntering() == true)) then
			GlobalRecords:AddNewRecord("spring_discovered", 1);
			Map.camera:SetMoving(false);
			EventManager:StartEvent(event_sequences["spring_arrival"]);
		end
	end

	if (GlobalRecords:DoesRecordExist("riverbed_arrival") == false) then
		if ((zones["riverbed_arrival"]:IsPlayerSpriteEntering() == true)) then
			GlobalRecords:AddNewRecord("riverbed_arrival", 1);
			EventManager:StartEvent(event_sequences["riverbed_arrival"]);
		end
	end
end -- function Update()



function Draw()
	Map:DrawMapLayers();
end



function CreateZones()
	IfPrintDebug(DEBUG, "Creating zones...");

	---------- Event Trigger Zones
	zones["corpse_discovery"] = hoa_map.CameraZone(180, 182, 134, 140, contexts["base"] + contexts["collapsed"]);
	Map:AddZone(zones["corpse_discovery"]);

	zones["prevent_long_route"] = hoa_map.CameraZone(132, 136, 70, 80, contexts["base"]);
	Map:AddZone(zones["prevent_long_route"]);

	zones["collapse"] = hoa_map.CameraZone(186, 189, 60, 63, contexts["base"]);
	Map:AddZone(zones["collapse"]);

	zones["forward_passage"] = hoa_map.CameraZone(78, 79, 6, 7, contexts["base"] + contexts["collapsed"]);
	Map:AddZone(zones["forward_passage"]);

	zones["backward_passage"] = hoa_map.CameraZone(110, 111, 20, 21, contexts["base"] + contexts["collapsed"]);
	Map:AddZone(zones["backward_passage"]);

	zones["spring_discovery"] = hoa_map.CameraZone(171, 186, 5, 10, contexts["base"] + contexts["collapsed"]);
	Map:AddZone(zones["spring_discovery"]);

	zones["riverbed_arrival"] = hoa_map.CameraZone(220, 221, 2, 11, contexts["base"] + contexts["collapsed"]);
	Map:AddZone(zones["riverbed_arrival"]);

	---------- Enemy Zones
	-- Zone #01: Near the entrance hallway on the dirt path
	zones["enemy01"] = hoa_map.EnemyZone(6, 20, 162, 186);
	Map:AddZone(zones["enemy01"]);

	-- Zone #02: First turn after the cave entrance
	zones["enemy02"] = hoa_map.EnemyZone(36, 79, 130, 141);
	Map:AddZone(zones["enemy02"]);

	-- Zone #03: Along the narrow southern passage between an open pit to the south and wall to the north
	zones["enemy03"] = hoa_map.EnemyZone(108, 140, 145, 148);
	Map:AddZone(zones["enemy03"]);

	-- Zone #04: South of ceiling overpass
	zones["enemy04"] = hoa_map.EnemyZone(146, 157, 90, 120);
	Map:AddZone(zones["enemy04"]);

	-- Zone #05: Wide open area at beginning of long route
	zones["enemy05"] = hoa_map.EnemyZone(26, 115, 68, 89);
	Map:AddZone(zones["enemy05"]);

	-- Zone #06: Above pits and before wall passage
	zones["enemy06"] = hoa_map.EnemyZone(24, 80, 8, 46);
	Map:AddZone(zones["enemy06"]);

	-- Zone #07: After the wall passage and before the spring
	zones["enemy07"] = hoa_map.EnemyZone(116, 143, 6, 40);
	Map:AddZone(zones["enemy07"]);
end -- function CreateZones()



function CreateObjects()
	IfPrintDebug(DEBUG, "Creating objects...");

	local object = {};
	local treasure = {};

	object = hoa_map.MapTreasure("img/misc/chest1.png", 4, 1, 1);
	object:SetObjectID(1001);
	object:SetXPosition(35, 0);
	object:SetYPosition(6, 0);
	treasure = object:GetTreasureContainer();
	treasure:AddDrunes(75);
	treasure:AddObject(1, 2);
	ObjectManager:AddObject(object);
end



function CreateSprites()
	IfPrintDebug(DEBUG, "Creating sprites...");

	----------------------------------------------------------------------------
	---------- Create character party sprites
	----------------------------------------------------------------------------
	-- Group #1: Playable character sprites
	sprites["claudius"] = ConstructSprite("Claudius", 1, 11, 227);
	sprites["claudius"]:SetDirection(hoa_map.MapMode.NORTH);
	sprites["claudius"].collidable = false;

	sprites["mark"] = ConstructSprite("Knight01", 2, 17, 227);
	sprites["mark"]:SetDirection(hoa_map.MapMode.NORTH);
	sprites["mark"].collidable = false;
	sprites["mark"]:SetName(hoa_system.Translate("Mark"));

	sprites["lukar"] = ConstructSprite("Knight01", 3, 14, 225);
	sprites["lukar"]:SetDirection(hoa_map.MapMode.NORTH);
	sprites["lukar"].collidable = false;
	sprites["lukar"]:SetName(hoa_system.Translate("Lukar"));

	----------------------------------------------------------------------------
	---------- Create NPCs in roughly the order encountered by the player
	----------------------------------------------------------------------------
	-- Knight near cave entrance serving as a guide
	sprites["entrance_knight"] = ConstructSprite("Knight01", 10, 14, 148);
	sprites["entrance_knight"]:SetDirection(hoa_map.MapMode.SOUTH);

	-- Knight guiding others through the short passage
	sprites["passage_knight1"] = ConstructSprite("Knight03", 20, 156, 62.5);
	sprites["passage_knight1"]:SetDirection(hoa_map.MapMode.EAST);

	-- Knight seen walking ahead through the short passage
	sprites["passage_knight2"] = ConstructSprite("Knight02", 21, 158, 62.5);
	sprites["passage_knight2"]:SetDirection(hoa_map.MapMode.WEST);

	-- Knight with injured ankle near the end of the long passage
	sprites["injury_knight1"] = ConstructSprite("Knight03", 30, 164, 19);
	sprites["injury_knight1"]:SetDirection(hoa_map.MapMode.EAST);

	-- Knight assisting the injured knight
	sprites["injury_knight2"] = ConstructSprite("Knight01", 31, 166, 20);
	sprites["injury_knight2"]:SetDirection(hoa_map.MapMode.WEST);

	-- All of the following NPCs are encountered at the end of the cave in the riverbed
	sprites["captain"] = ConstructSprite("Knight06", 2500, 248, 16);
	sprites["captain"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["captain"].collidable = false;

	sprites["sergeant"] = ConstructSprite("Knight05", 2501, 249, 19);
	sprites["sergeant"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["sergeant"].collidable = false;

	sprites["river_knight1"] = ConstructSprite("Knight04", 2502, 245, 11);
	sprites["river_knight1"]:SetDirection(hoa_map.MapMode.SOUTH);
	sprites["river_knight1"].collidable = false;

	sprites["river_knight2"] = ConstructSprite("Knight03", 2503, 242, 8);
	sprites["river_knight2"]:SetDirection(hoa_map.MapMode.SOUTH);
	sprites["river_knight2"].collidable = false;

	sprites["river_knight3"] = ConstructSprite("Knight02", 2504, 239, 9);
	sprites["river_knight3"]:SetDirection(hoa_map.MapMode.SOUTH);
	sprites["river_knight3"].collidable = false;

	sprites["river_knight4"] = ConstructSprite("Knight01", 2505, 240, 22);
	sprites["river_knight4"]:SetDirection(hoa_map.MapMode.NORTH);
	sprites["river_knight4"].collidable = false;

	sprites["river_knight5"] = ConstructSprite("Knight02", 2506, 243, 23);
	sprites["river_knight5"]:SetDirection(hoa_map.MapMode.NORTH);
	sprites["river_knight5"].collidable = false;

	sprites["river_knight6"] = ConstructSprite("Knight03", 2507, 245, 21);
	sprites["river_knight6"]:SetDirection(hoa_map.MapMode.NORTH);
	sprites["river_knight6"].collidable = false;

	sprites["river_knight7"] = ConstructSprite("Knight01", 2508, 234, 20);
	sprites["river_knight7"]:SetDirection(hoa_map.MapMode.EAST);
	sprites["river_knight7"].collidable = false;

	sprites["river_knight8"] = ConstructSprite("Knight01", 2509, 233, 17);
	sprites["river_knight8"]:SetDirection(hoa_map.MapMode.EAST);
	sprites["river_knight8"].collidable = false;

	sprites["river_knight9"] = ConstructSprite("Knight02", 2510, 235, 14);
	sprites["river_knight9"]:SetDirection(hoa_map.MapMode.EAST);
	sprites["river_knight9"].collidable = false;

	-- This sprite represents the boss encountered at the end of the map
	-- TODO: build the sprite properly using the large scoprion sprite
	sprites["scorpion_boss"] = ConstructEnemySprite("goliath_scorpion", ObjectManager:GenerateObjectID());
	sprites["scorpion_boss"]:SetContext(contexts["collapsed"]);
	sprites["scorpion_boss"]:SetPosition(274, 20);
	sprites["scorpion_boss"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["scorpion_boss"].collidable = false;
	sprites["scorpion_boss"]:SetMovementSpeed(hoa_map.MapMode.SLOW_SPEED);
	sprites["scorpion_boss"]:SetFadeTime(1000);
end -- function CreateSprites()



function CreateEnemies()
	IfPrintDebug(DEBUG, "Creating enemies...");

	-- Sets common battle environment settings for enemy sprites
	local SetBattleEnvironment = function(enemy)
		enemy:SetBattleMusicFile("mus/Battle_Jazz.ogg");
		enemy:SetBattleBackgroundFile("img/backdrops/battle/desert_cave.png");
		enemy:SetBattleScriptFile("lua/scripts/battles/first_battle.lua");
	end

	local enemy = {};

	---------- Create enemy sprites and adds them to the zones that they spawn/roam in
	-- Group #01
	enemy = ConstructEnemySprite("slime", ObjectManager:GenerateObjectID());
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(1);
	enemy:AddEnemy(1);
	enemy:AddEnemy(2);
	enemy:AddEnemy(2);
	zones["enemy01"]:AddEnemy(enemy, Map, 1);

	-- Group #02
	enemy = ConstructEnemySprite("snake", ObjectManager:GenerateObjectID());
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(3);
	enemy:AddEnemy(2);
	enemy:AddEnemy(3);
	enemy:AddEnemy(2);
	enemy:NewEnemyParty();
	enemy:AddEnemy(3);
	enemy:AddEnemy(2);
	enemy:AddEnemy(3);
	enemy:AddEnemy(1);
	zones["enemy02"]:AddEnemy(enemy, Map, 1);

	-- Group #03
	enemy = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID());
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(5);
	enemy:AddEnemy(5);
	enemy:AddEnemy(3);
	enemy:AddEnemy(5);
	zones["enemy03"]:AddEnemy(enemy, Map, 1);

	-- Group #04
	enemy = ConstructEnemySprite("snake", ObjectManager:GenerateObjectID());
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(6);
	enemy:AddEnemy(3);
	enemy:AddEnemy(2);
	enemy:AddEnemy(3);
	enemy:AddEnemy(6);
	enemy:NewEnemyParty();
	enemy:AddEnemy(3);
	enemy:AddEnemy(6);
	enemy:AddEnemy(6);
	enemy:AddEnemy(6);
	zones["enemy04"]:AddEnemy(enemy, Map, 1);

	-- Group #05
	enemy = ConstructEnemySprite("slime", ObjectManager:GenerateObjectID());
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(1);
	enemy:AddEnemy(1);
	enemy:AddEnemy(1);
	enemy:AddEnemy(6);
	enemy:NewEnemyParty();
	enemy:AddEnemy(1);
	enemy:AddEnemy(2);
	enemy:AddEnemy(6);
	zones["enemy05"]:AddEnemy(enemy, Map, 1);

	enemy = ConstructEnemySprite("snake", ObjectManager:GenerateObjectID());
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(6);
	enemy:AddEnemy(3);
	enemy:AddEnemy(2);
	enemy:AddEnemy(4);
	enemy:AddEnemy(6);
	zones["enemy05"]:AddEnemy(enemy, Map, 1);

	enemy = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID());
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(5);
	enemy:AddEnemy(5);
	enemy:AddEnemy(4);
	enemy:NewEnemyParty();
	enemy:AddEnemy(5);
	enemy:AddEnemy(5);
	enemy:AddEnemy(3);
	zones["enemy05"]:AddEnemy(enemy, Map, 1);

	-- Group #06
	enemy = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID());
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(5);
	enemy:AddEnemy(5);
	enemy:AddEnemy(3);
	enemy:NewEnemyParty();
	enemy:AddEnemy(5);
	enemy:AddEnemy(5);
	enemy:AddEnemy(4);
	zones["enemy06"]:AddEnemy(enemy, Map, 1);

	-- Group #07
	enemy = ConstructEnemySprite("snake", ObjectManager:GenerateObjectID());
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(6);
	enemy:AddEnemy(3);
	enemy:AddEnemy(2);
	enemy:AddEnemy(3);
	enemy:AddEnemy(6);
	enemy:NewEnemyParty();
	enemy:AddEnemy(3);
	enemy:AddEnemy(6);
	enemy:AddEnemy(5);
	enemy:AddEnemy(2);
	enemy:AddEnemy(4);
	zones["enemy07"]:AddEnemy(enemy, Map, 1);

	enemy = ConstructEnemySprite("scorpion", ObjectManager:GenerateObjectID());
	SetBattleEnvironment(enemy);
	enemy:NewEnemyParty();
	enemy:AddEnemy(5);
	enemy:AddEnemy(5);
	enemy:AddEnemy(4);
	enemy:NewEnemyParty();
	enemy:AddEnemy(5);
	enemy:AddEnemy(5);
	enemy:AddEnemy(3);
	zones["enemy07"]:AddEnemy(enemy, Map, 1);
end -- function CreateEnemies()


-- This is done outside of CreateDialogues() so that both events and dialogues being created can reference them
function CreateDialogueReferences()
	dialogues["entrance1"] = 100;
	dialogues["entrance2"] = 101;
	dialogues["entrance3"] = 102;
	dialogues["entrance4"] = 103;
	dialogues["first_npc_encounter"] = 110;
	dialogues["corpse_discovery1"] = 120;
	dialogues["corpse_discovery2"] = 121;
	dialogues["prevent_long_route"] = 130;
	dialogues["passage_collapse1"] = 140;
	dialogues["passage_collapse2"] = 141;
	dialogues["prevent_level_descent"] = 150;
	dialogues["hiss_sound"] = 160;
	dialogues["spring_arrival"] = 170;
	dialogues["riverbed_arrival"] = 180;
	dialogues["npc_heals"] = 181;
	dialogues["enemy_gauntlet1"] = 190;
	dialogues["enemy_gauntlet2"] = 191;
	dialogues["enemy_gauntlet3"] = 192;
	dialogues["before_boss"] = 200;
	dialogues["after_boss"] = 210;
end



function CreateDialogues()
	IfPrintDebug(DEBUG, "Creating dialogues...");

	local dialogue;
	local text;

	----------------------------------------------------------------------------
	---------- Dialogues attached to characters
	----------------------------------------------------------------------------

	dialogue = hoa_map.MapDialogue.Create(11);
		text = hoa_system.Translate("Watch your step and keep moving. It's not far to the river bed.");
		dialogue:AddLine(text, sprites["entrance_knight"]:GetObjectID());
	sprites["entrance_knight"]:AddDialogueReference(11);

	dialogue = hoa_map.MapDialogue.Create(20);
		text = hoa_system.Translate("The river bed is just through this passage. Be careful, the walls are a little unstable.");
		dialogue:AddLine(text, sprites["passage_knight1"]:GetObjectID());
		dialogue:AddLineEventAtEnd(1010); -- Calls function IfStartObservePassingEvent to begin event_sequences["observe_passing"]
	sprites["passage_knight1"]:AddDialogueReference(20);

	-- After the passage collapse event, this dialogue will be added to the passage_knight1 sprite
	dialogue = hoa_map.MapDialogue.Create(21);
		text = hoa_system.Translate("I'll direct everyone remaining to take the longer route.");
		dialogue:AddLine(text, sprites["passage_knight1"]:GetObjectID());

	dialogue = hoa_map.MapDialogue.Create(30);
		text = hoa_system.Translate("Dammit, ow ow ow...");
		dialogue:AddLine(text, sprites["injury_knight1"]:GetObjectID());
	sprites["injury_knight1"]:AddDialogueReference(30);

	dialogue = hoa_map.MapDialogue.Create(31);
		text = hoa_system.Translate("He sprained his ankle on a loose rock, so we're treating his injury. Move on ahead, you're almost there.");
		dialogue:AddLine(text, sprites["injury_knight2"]:GetObjectID());
	sprites["injury_knight2"]:AddDialogueReference(31);

	----------------------------------------------------------------------------
	---------- Dialogues triggered by events
	----------------------------------------------------------------------------
	-- Event: Entering the cave
	dialogue = hoa_map.MapDialogue.Create(dialogues["entrance1"]);
		text = hoa_system.Translate("Claudius, I want you to lead us down to the riverbed.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());

	dialogue = hoa_map.MapDialogue.Create(dialogues["entrance2"]);
		text = hoa_system.Translate("Wait a damn minute Lukar! Why are you putting a rookie like him in charge?");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());

	dialogue = hoa_map.MapDialogue.Create(dialogues["entrance3"]);
		text = hoa_system.Translate("Relax, Mark. This is the best way for him to get experience.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());

	dialogue = hoa_map.MapDialogue.Create(dialogues["entrance4"]);
		text = hoa_system.Translate("Claudius, I realize that this is your first real mission as a knight. If you're not up to this task, that's okay.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("No, I can do it. I won't lead us astray.");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());
		text = hoa_system.Translate("Good. The path we're taking should be pretty straight forward, so don't worry about getting lost.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("Tcsh. Just try not to get us all killed, okay rookie?");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());

	-- Event: Encountering first NPCs in the cave
	dialogue = hoa_map.MapDialogue.Create(dialogues["first_npc_encounter"]);
		text = hoa_system.Translate("Hold. There's a friendly ahead. Characters that have information to share will have a small icon appear above them that gradually appears as you get closer. Stand facing the character and hit the [CONFIRM] key to hear what they have to say.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("Keep in mind that a character may have more than one piece of information to share, or may have something new to say after a particular event has occurred. The icon will look differently if the character has dialogue that you have not seen before.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("So in other words, I should keep initiating a conversation with these characters until the new dialogue icon no longer appears above their head.");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());
		text = hoa_system.Translate("Look out, boys. We got a regular genius over here. Maybe you should have become a scholar instead of a knight.");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());

	-- Event: Discovery of corpse in south east part of cave
	dialogue = hoa_map.MapDialogue.Create(dialogues["corpse_discovery1"]);
		text = hoa_system.Translate("Wait, look over there.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());

	dialogue = hoa_map.MapDialogue.Create(dialogues["corpse_discovery2"]);
		text = hoa_system.Translate("A corpse. That's always a reassuring find in a place like this.");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());
		text = hoa_system.Translate("Hey, I think I see something under its hand.");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());

	-- Event: Player tries to go long route before short route
	dialogue = hoa_map.MapDialogue.Create(dialogues["prevent_long_route"]);
		text = hoa_system.Translate("Hey! Over here!");
		dialogue:AddLine(text, sprites["passage_knight1"]:GetObjectID());

	-- Event: As passage is collapsing
	dialogue = hoa_map.MapDialogue.Create(dialogues["passage_collapse1"]);
		text = hoa_system.Translate("Look out!");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		dialogue:AddLineTiming(1000);

	-- Event: After passage collapse occurs
	dialogue = hoa_map.MapDialogue.Create(dialogues["passage_collapse2"]);
		text = hoa_system.Translate("Woah! Are you guys alright?");
		dialogue:AddLine(text, sprites["passage_knight1"]:GetObjectID());
		text = hoa_system.Translate("We're all fine. But the passage has caved in.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("There's another way around, although it's a longer route. Follow me.");
		dialogue:AddLine(text, sprites["passage_knight1"]:GetObjectID());

	-- Event: Stopping player from trying to proceed to lower levels of the cave
	dialogue = hoa_map.MapDialogue.Create(dialogues["prevent_level_descent"]);
		text = hoa_system.Translate("Wait. This path looks like it leads deeper into the cavern. The area we're trying to reach isn't down there. Let's head another direction.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("Good. Who knows what could be lurking in the darkness down there.");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());

	-- Event: While crossing the narrow bridge between the two pits after hearing an evil hiss
	dialogue = hoa_map.MapDialogue.Create(dialogues["hiss_sound"]);
		text = hoa_system.Translate("Did you hear that? What the hell was that sound?");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());
		text = hoa_system.Translate("I don't know, but I've got a bad feeling about this mission.");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());
		text = hoa_system.Translate("Well the sooner we achieve our objective, the sooner we get out of here and go home. So move your ass instead of your mouth.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());

	-- Event: Encountering the pool of running water near the end of the cave
	dialogue = hoa_map.MapDialogue.Create(dialogues["spring_arrival"]);
		text = hoa_system.Translate("Hey check it out. The water is still running here.");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());
		text = hoa_system.Translate("That's a good sign. The river obstruction must be close.");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());

	-- Event: Player reaches dry river bed
	dialogue = hoa_map.MapDialogue.Create(dialogues["riverbed_arrival"]);
		text = hoa_system.Translate("Alright, looks like everyone made it.");
		dialogue:AddLine(text, sprites["captain"]:GetObjectID());
		text = hoa_system.Translate("Listen up! There's a large boulder obstructing the underground river that flows through here. When we get the water flowing again, we get to head out of here.");
		dialogue:AddLine(text, sprites["captain"]:GetObjectID());
		text = hoa_system.Translate("Mikal! Torren! Take your units and secure ropes around that overgrown rock. The rest of you stay alert and watch their backs. The residents of this cave aren't going to be pleased that we're rearranging their home.");
		dialogue:AddLine(text, sprites["sergeant"]:GetObjectID());

	dialogue = hoa_map.MapDialogue.Create(dialogues["npc_heals"]);
		text = hoa_system.Translate("Here, this will remove your fatigue. We need everyone to be at their full strength before we begin.");
		dialogue:AddLine(text, sprites["river_knight1"]:GetObjectID());
		dialogue:AddLineEventAtEnd(event_sequences["fatigue_restore"]);
		text = hoa_system.Translate("Max HP and max SP fully restored.");
		-- TODO: this line is informational text and shouldn't be "spoken" by any sprite, but we do not yet have support for dialogue not attached to sprites
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());

	-- Event: enemy battle gauntlet prior to boss fight
	dialogue = hoa_map.MapDialogue.Create(dialogues["enemy_gauntlet1"]);
		text = hoa_system.Translate("Ready your swords. Here they come!");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());

	dialogue = hoa_map.MapDialogue.Create(dialogues["enemy_gauntlet2"]);
		text = hoa_system.Translate("Don't let any through!");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());

	dialogue = hoa_map.MapDialogue.Create(dialogues["enemy_gauntlet3"]);
		text = hoa_system.Translate("Damn, there's still more?");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());

	-- Event: Before boss battle
	dialogue = hoa_map.MapDialogue.Create(dialogues["before_boss"]);
		text = hoa_system.Translate("I heard that noise earlier. It sounds like its closer now.");
		dialogue:AddLine(text, sprites["mark"]:GetObjectID());
		text = hoa_system.Translate("Keep your eyes peeled and your swords ready men.");
		dialogue:AddLine(text, sprites["river_knight1"]:GetObjectID());
		text = hoa_system.Translate("I don't know how you expect to see shit in here. I can barely see the end of my blade.");
		dialogue:AddLine(text, sprites["river_knight2"]:GetObjectID());
		text = hoa_system.Translate("Over there! Watch out!");
		dialogue:AddLine(text, sprites["claudius"]:GetObjectID());

	-- Event: After boss battle
	dialogue = hoa_map.MapDialogue.Create(dialogues["after_boss"]);
		text = hoa_system.Translate("Captain, you've been wounded!");
		dialogue:AddLine(text, sprites["lukar"]:GetObjectID());
		text = hoa_system.Translate("*cough cough*\nI'll be alright. Men, great job taking down that goliath. You've done well.");
		dialogue:AddLine(text, sprites["captain"]:GetObjectID());
		text = hoa_system.Translate("We've achieved our objective here. Tend to the wounded and then let's make our way back home.");
		dialogue:AddLine(text, sprites["sergeant"]:GetObjectID());
end -- function CreateDialogues()



function CreateEvents()
	IfPrintDebug(DEBUG, "Creating events...");

	local event = {};
	local event_id;

	---------- Event Sequence 01: Initial scene and 4-part dialogue when the player first enters the cave
	event_sequences["entrance"], event_id = 1, 1;
	-- Part #1: Lukar turns around and asks Cladius to lead
	event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], 0, -16);
	event:SetRelativeDestination(true);
	event:AddEventLinkAtStart(event_id + 1);
	event:AddEventLinkAtStart(event_id + 2);
	event:AddEventLinkAtEnd(event_id + 3, 1000);
	event:AddEventLinkAtEnd(event_id + 4, 1500);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["mark"], 0, -16);
	event:SetRelativeDestination(true);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["lukar"], 0, -16);
	event:SetRelativeDestination(true);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["lukar"]);
	event:Direction(hoa_map.MapMode.SOUTH);
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["entrance1"]);
	event:AddEventLinkAtEnd(event_id + 1, 250);
	event:AddEventLinkAtEnd(event_id + 2, 500);
	event:AddEventLinkAtEnd(event_id + 3, 500);
	-- Part #2: Mark protests Lukar's decision
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["mark"]);
	event:Direction(hoa_map.MapMode.WEST);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["claudius"]);
	event:Direction(hoa_map.MapMode.EAST);
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["entrance2"]);
	event:AddEventLinkAtEnd(event_id + 1, 200);
	-- Part #3: Lukar reassures Mark
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["lukar"]);
	event:Direction(hoa_map.MapMode.EAST);
	event:AddEventLinkAtEnd(event_id + 1, 100);
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["entrance3"]);
	event:AddEventLinkAtEnd(event_id + 1, 300);
	-- Part #4: Lukar asks Claudius again, who accepts. Mark and Lukar's sprites disappear into Claudius
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["lukar"], -5, 0);
	event:SetRelativeDestination(true);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["lukar"]);
	event:Direction(hoa_map.MapMode.SOUTH);
	event:AddEventLinkAtEnd(event_id + 1, 100);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["claudius"]);
	event:Direction(hoa_map.MapMode.NORTH);
	event:AddEventLinkAtEnd(event_id + 1, 100);
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["entrance4"]);
	event:AddEventLinkAtEnd(event_id + 1, 100);
	event:AddEventLinkAtEnd(event_id + 3, 100);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["lukar"], 0, 4);
	event:SetRelativeDestination(true);
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["lukar"]);
	event:Visible(false);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["mark"], -8, 0);
	event:SetRelativeDestination(true);
	event:AddEventLinkAtEnd(event_id + 1);
	event:AddEventLinkAtEnd(event_id + 2);
	event:AddEventLinkAtEnd(event_id + 3);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["mark"]);
	event:Visible(false);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["claudius"]);
	event:Collidable(true);
	event_id = event_id + 1; event = hoa_map.PopMapStateEvent.Create(event_id);
--	-- Part #5: TODO: pop up the on-screen help dialogue to show the controls

	---------- Event Sequence 02: Discovery of corpse in cave (optional)
	event_sequences["find_corpse"], event_id = 40, 40;

	-- Dialog when seeing the corpse
	event = hoa_map.DialogueEvent.Create(event_id, dialogues["corpse_discovery1"]);
	event:SetStopCameraMovement(true);
	event:AddEventLinkAtEnd(event_id + 1);
	event:AddEventLinkAtEnd(event_id + 2);
	-- Enter scene state
	event_id = event_id + 1; event = hoa_map.PushMapStateEvent.Create(event_id, hoa_map.MapMode.STATE_SCENE);
	event:StopCameraMovement();
	-- Move camera to corpse
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "CameraPanToCorpse", "");
	event:AddEventLinkAtEnd(event_id + 1, 3000);
	-- Walk Claudius over to corpse
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], 206, 149);
	event:AddEventLinkAtEnd(event_id + 1);
	event:AddEventLinkAtEnd(event_id + 2);
	event:AddEventLinkAtEnd(event_id + 3);
	-- Face Claudius east toward the corpse
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["claudius"]);
	event:Direction(hoa_map.MapMode.EAST);
	-- Move camera back to Cladius
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "SetCameraToPlayer", "");
	-- Start dialogue about corpse
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["corpse_discovery2"]);
	event:SetStopCameraMovement(true);
	event:AddEventLinkAtEnd(event_id + 1);
	-- Exit Scene State
	event_id = event_id + 1; event = hoa_map.PopMapStateEvent.Create(event_id);
	event:AddEventLinkAtStart(event_id + 1);
	-- Add treasure
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "RewardPotion", "");


	---------- Event Sequence 04: Prevent player from going long route before cave collapse
	event_sequences["follow_short_route"], event_id = 50, 50;

	-- Enter scene state
	event = hoa_map.PushMapStateEvent.Create(event_id, hoa_map.MapMode.STATE_SCENE);
	event:StopCameraMovement();
	event:AddEventLinkAtEnd(event_id + 1);
	-- Move camera to knight sprite
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "CameraToGuideSprite", "");
	event:AddEventLinkAtEnd(event_id + 1, 500);
	event:AddEventLinkAtEnd(event_id + 2, 1000);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["passage_knight1"]);
	event:Direction(hoa_map.MapMode.SOUTH);
	-- Throw up dialogue calling out player's party
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["prevent_long_route"]);
	event:SetStopCameraMovement(true);
	event:AddEventLinkAtEnd(event_id + 1);
	-- Move camera back to Cladius
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "SetCameraToPlayer", "");
	event:AddEventLinkAtEnd(event_id + 1, 500);
	-- Move player sprite to NPC that called out
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"]:GetObjectID(), 8, 0);
	event:SetRelativeDestination(true);
	event:AddEventLinkAtEnd(event_id + 1);
	-- Exit scene state
	event_id = event_id + 1; event = hoa_map.PopMapStateEvent.Create(event_id);

	---------- Event Sequence 05: Knight moves safely through short route while player watches
	event_sequences["observe_passing"], event_id = 60, 60;

	-- Enter scene state
	event = hoa_map.PushMapStateEvent.Create(event_id, hoa_map.MapMode.STATE_SCENE);
	event:StopCameraMovement();
	event:AddEventLinkAtEnd(event_id + 1);
	-- Move Claudius south of the guide knight (he may already be at this location, and that's fine)
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"],
		sprites["passage_knight1"].x_position, sprites["passage_knight1"].y_position + 3);
	event:SetFinalDirection(hoa_map.MapMode.NORTH);
	event:AddEventLinkAtEnd(event_id + 1);
	-- Move guide knight out of the way so player can access passage
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["passage_knight1"], -4, 0);
	event:SetFinalDirection(hoa_map.MapMode.EAST);
	event:SetRelativeDestination(true);
	event:AddEventLinkAtEnd(event_id + 1);
	-- Move camera to knight sprite
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "CameraFollowPathSprite", "");
	event:AddEventLinkAtEnd(event_id + 1, 300);
	-- Move knight sprite down passage
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["passage_knight2"], 60, 0);
	event:SetRelativeDestination(true);
	event:AddEventLinkAtStart(event_id + 1, 2500);
	event:AddEventLinkAtStart(event_id + 2, 3000);
	event:AddEventLinkAtEnd(event_id + 3);
	-- Move camera back
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "SetCameraToPlayer", "");
	-- Exit scene state
	event_id = event_id + 1; event = hoa_map.PopMapStateEvent.Create(event_id);
	-- Hide the knight sprite after he finishes walking through the passage
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "VanishPathSprite", "");

	---------- Event Sequence 06: Short route passage collapses
	event_sequences["passage_collapse"], event_id = 70, 70;

	-- Enter scene state
	event = hoa_map.PushMapStateEvent.Create(event_id, hoa_map.MapMode.STATE_SCENE);
	event:StopCameraMovement();
	event:AddEventLinkAtStart(event_id + 1);
	-- Play collapse sound
	event_id = event_id + 1; event = hoa_map.SoundEvent.Create(event_id, "snd/cave-in.ogg");
	event:AddEventLinkAtStart(event_id + 1, 250);
	-- Warning dialogue
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["passage_collapse1"]);
	event:AddEventLinkAtEnd(event_id + 1);
	-- Shake the screen
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "PassageCollapseShake", "");
	event:AddEventLinkAtEnd(event_id + 1);
	-- Fade screen to black
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "FadeOutScreen", "IsScreenFading");
	event:AddEventLinkAtEnd(event_id + 1);
	-- Change all objects to context "passage collapsed"
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "SwitchContextCollapsed", "");
	event:AddEventLinkAtEnd(event_id + 1);
	-- Fade screen back in
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "FadeInScreen", "IsScreenFading");
	event:AddEventLinkAtStart(event_id + 1);
	-- Move guide knight into the screen view
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["passage_knight1"], 20, 0);
	event:SetRelativeDestination(true);
	event:AddEventLinkAtEnd(event_id + 1);
	event:AddEventLinkAtEnd(event_id + 2);
	-- Turn Claudius to face guide knight
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["claudius"]);
	event:Direction(hoa_map.MapMode.WEST);
	-- Dialogue after passage has collapsed
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["passage_collapse2"]);
	event:AddEventLinkAtEnd(event_id + 1);
	-- Change dialogue of sprite guide
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "ReplaceGuideDialogue", "");
	event:AddEventLinkAtEnd(event_id + 1);
	event:AddEventLinkAtEnd(event_id + 2, 1000);
	-- Move guide knight to start of long passage
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["passage_knight1"], 145, 72);
	event:SetFinalDirection(hoa_map.MapMode.SOUTH);
	-- Exit scene state
	event_id = event_id + 1; event = hoa_map.PopMapStateEvent.Create(event_id);

	----------  Event Sequence 07: Moving forward through wall passage
	event_sequences["pass_wall_forward"], event_id = 90, 90;

	-- Make player sprite invisible with no collision detection
	event = hoa_map.CustomEvent.Create(event_id, "HideCameraSprite", "");
	event:AddEventLinkAtEnd(event_id + 1);
	-- Move camera inside of wall
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], 85, 6);
	event:AddEventLinkAtEnd(event_id + 1);
	-- Move camera down and to the right near wall passage exit
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], 104, 22);
	event:AddEventLinkAtEnd(event_id + 1);
	-- Move sprite back outside of wall
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], 112, 21);
	event:AddEventLinkAtEnd(event_id + 1);
	-- Make player sprite visible and restore collision detection
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "ShowCameraSprite", "");

	---------- Event Sequence 08: Moving backward through wall passage
	event_sequences["pass_wall_backward"], event_id = 95, 95;

	-- Make player sprite invisible with no collision detection
	event = hoa_map.CustomEvent.Create(event_id, "HideCameraSprite", "");
	event:AddEventLinkAtEnd(event_id + 1);
	-- Move camera inside of wall
	event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], 112, 21);
	event:AddEventLinkAtEnd(event_id + 1);
	-- Move camera up and to the left near wall passage exit
	event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], 85, 6);
	event:AddEventLinkAtEnd(event_id + 1);
	-- Move sprite back outside of wall
	event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], 76, 6);
	event:AddEventLinkAtEnd(event_id + 1);
	-- Make player sprite visible and restore collision detection
	event = hoa_map.CustomEvent.Create(event_id, "ShowCameraSprite", "");

	---------- Event Sequence 09: Arriving at the spring just before riverbed
	event_sequences["spring_arrival"], event_id = 100, 100;

	-- Begin dialogue between characters
	event = hoa_map.DialogueEvent.Create(event_sequences["spring_arrival"], dialogues["spring_arrival"]);

	-- The event sequences that follow are played out sequentially, hence why we define their event sequence IDs here
	-- so that each sequence can have access to the starting event ID of the proceeding sequence.
	event_sequences["riverbed_arrival"] = 110;
	event_sequences["enemy_gauntlet"] = 150;
	event_sequences["boss_encounter"] = 190;
	event_sequences["final_scene"] = 230;

	---------- Event Sequence 10: Arriving at riverbed

	-- Enter the scene state, which we will remain at for the remaind of the map outside of dialogues
	event_id = event_sequences["riverbed_arrival"];
	event = hoa_map.PushMapStateEvent.Create(event_id, hoa_map.MapMode.STATE_SCENE);
	event:StopCameraMovement(); -- TODO: also disable running for the camera, otherwise the player sprite remains in "run mode" for the scene
	event:AddEventLinkAtEnd(event_id + 1);
	-- Move player sprite in to the gathering of knights in the river bed
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], 238, 12);
	event:SetFinalDirection(hoa_map.MapMode.EAST);
	event:AddEventLinkAtEnd(event_id + 1);
	-- Begin arrival dialogue
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["riverbed_arrival"]);
	event:AddEventLinkAtEnd(event_id + 1);
	-- Move senior knight to the right of Claudius and begin the healing dialogue
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["river_knight1"], 238, 12)
	event:SetFinalDirection(hoa_map.MapMode.WEST);
	event:AddEventLinkAtEnd(event_id + 1, 0);
	-- Note: within this dialogue event, the fatigue_restore event will be called
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["npc_heals"]);
	event:AddEventLinkAtEnd(event_id + 1, 0);
	event:AddEventLinkAtEnd(event_id + 3, 200);
	event:AddEventLinkAtEnd(event_id + 4, 200);
	event:AddEventLinkAtEnd(event_id + 5, 200);
	event:AddEventLinkAtEnd(event_id + 6, 200);
	event:AddEventLinkAtEnd(event_id + 7, 200);
	event:AddEventLinkAtEnd(event_id + 8, 200);
	event:AddEventLinkAtEnd(event_id + 9, 200);
	event:AddEventLinkAtEnd(event_id + 10, 200);
	event:AddEventLinkAtEnd(event_id + 11, 200);
	event:AddEventLinkAtEnd(event_id + 12, 200);
	event:AddEventLinkAtEnd(event_id + 13, 200);
	event:AddEventLinkAtEnd(event_id + 14, 200);
	event:AddEventLinkAtEnd(event_sequences["enemy_gauntlet"], 5000);
	-- Set the camera to the virtual focus and move it to the center of the knight's furture position
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "VirtualFocusToPlayer", "");
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id,  Map.virtual_focus, 260, 16);
	-- Move the character sprite and other knights to their positions
	-- Knights to the north are working on moving the boulder
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["river_knight2"], 260, 13);
	event:SetFinalDirection(hoa_map.MapMode.NORTH);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["river_knight3"], 256, 13);
	event:SetFinalDirection(hoa_map.MapMode.NORTH);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["river_knight4"], 258, 14);
	event:SetFinalDirection(hoa_map.MapMode.NORTH);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["river_knight5"], 263, 13);
	event:SetFinalDirection(hoa_map.MapMode.WEST);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["captain"], 262, 15);
	event:SetFinalDirection(hoa_map.MapMode.NORTH); -- TODO: for some reason captain sprite won't change his facing direction here
	-- Knights to the south are defending (including Claudius)
	event:SetFinalDirection(hoa_map.MapMode.SOUTH);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["river_knight7"], 264, 24);
	event:SetFinalDirection(hoa_map.MapMode.SOUTH);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["river_knight8"], 260, 23);
	event:SetFinalDirection(hoa_map.MapMode.SOUTH);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["claudius"], 256, 22);
	event:SetFinalDirection(hoa_map.MapMode.SOUTH);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["sergeant"], 257, 19);
	event:SetFinalDirection(hoa_map.MapMode.SOUTH);
	-- Knights to the west are defending
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["river_knight9"], 253, 15);
	event:SetFinalDirection(hoa_map.MapMode.WEST);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["river_knight1"], 251, 18);
	event:SetFinalDirection(hoa_map.MapMode.WEST);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["river_knight6"], 253, 19);
	event:SetFinalDirection(hoa_map.MapMode.WEST);

	---------- Event Sequence 11: Enemy gauntlet
	local battle_music = "mus/Battle_Jazz.ogg";
	local battle_background = "img/backdrops/battle/desert_cave.png";

	-- TODO: add a sound like the movement of rocks to indicate the unblocking work has begun
	-- TODO: add spawning and movement of enemies to the knights before battle
	-- First dialogue and battle
	event_id = event_sequences["enemy_gauntlet"];
	event = hoa_map.DialogueEvent.Create(event_id, dialogues["enemy_gauntlet1"]);
	event:AddEventLinkAtEnd(event_id + 1, 500);
	event_id = event_id + 1; event = hoa_map.BattleEncounterEvent.Create(event_id);
	event:SetMusic(battle_music);
	event:SetBackground(battle_background);
	event:AddEnemy(2);
	event:AddEnemy(3);
	event:AddEnemy(3);
	event:AddEventLinkAtEnd(event_id + 1, 500);
	-- Second dialogue and battle
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["enemy_gauntlet2"]);
	event:AddEventLinkAtEnd(event_id + 1, 500);
	event_id = event_id + 1; event = hoa_map.BattleEncounterEvent.Create(event_id);
	event:SetMusic(battle_music);
	event:SetBackground(battle_background);
	event:AddEnemy(4);
	event:AddEnemy(4);
	event:AddEnemy(6);
	event:AddEventLinkAtEnd(event_id + 1, 500);
	-- Third dialogue and battle
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["enemy_gauntlet3"]);
	event:AddEventLinkAtEnd(event_id + 1, 500);
	event_id = event_id + 1; event = hoa_map.BattleEncounterEvent.Create(event_id);
	event:SetMusic(battle_music);
	event:SetBackground(battle_background);
	event:AddEnemy(5);
	event:AddEnemy(5);
	event:AddEnemy(7);
	event:AddEventLinkAtEnd(event_sequences["boss_encounter"], 1000);

	---------- Event Sequence 12: Boss encounter and battle

	event_id = event_sequences["boss_encounter"];
	event = hoa_map.SoundEvent.Create(event_id, "snd/evil_hiss.ogg");
	event:AddEventLinkAtStart(event_id + 1, 750);
	event:AddEventLinkAtStart(event_id + 2, 1110);
	event:AddEventLinkAtStart(event_id + 3, 800);
	event:AddEventLinkAtStart(event_id + 4, 570);
	event:AddEventLinkAtStart(event_id + 5, 1290);
	event:AddEventLinkAtStart(event_id + 6, 1640);
	event:AddEventLinkAtStart(event_id + 7, 560);
	event:AddEventLinkAtStart(event_id + 8, 1330);
	event:AddEventLinkAtStart(event_id + 9, 2470);
	event:AddEventLinkAtStart(event_id + 10, 1500);
	-- Sprites look around in random directions trying to find the source of the sound
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["claudius"]);
	event:Direction(hoa_map.MapMode.NORTH);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["river_knight5"]);
	event:Direction(hoa_map.MapMode.SOUTH);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["captain"]);
	event:Direction(hoa_map.MapMode.WEST);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["river_knight7"]);
	event:Direction(hoa_map.MapMode.NORTH);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["river_knight8"]);
	event:Direction(hoa_map.MapMode.EAST);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["sergeant"]);
	event:Direction(hoa_map.MapMode.NORTH);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["river_knight9"]);
	event:Direction(hoa_map.MapMode.NORTH);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["river_knight1"]);
	event:Direction(hoa_map.MapMode.WEST);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["river_knight6"]);
	event:Direction(hoa_map.MapMode.SOUTH);
	-- After the dialogue, have all sprites look toward the spawning boss enemy
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["before_boss"]);
	event:AddEventLinkAtEnd(event_id + 1, 50);
	event:AddEventLinkAtEnd(event_id + 2, 25);
	event:AddEventLinkAtEnd(event_id + 3, 75);
	event:AddEventLinkAtEnd(event_id + 4, 100);
	event:AddEventLinkAtEnd(event_id + 5, 50);
	event:AddEventLinkAtEnd(event_id + 6, 75);
	event:AddEventLinkAtEnd(event_id + 7, 25);
	event:AddEventLinkAtEnd(event_id + 8, 100);
	event:AddEventLinkAtEnd(event_id + 9, 50);
	event:AddEventLinkAtEnd(event_id + 10, 25);
	event:AddEventLinkAtEnd(event_id + 11, 75);
	event:AddEventLinkAtEnd(event_id + 12, 50);
	event:AddEventLinkAtEnd(event_id + 13);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["claudius"]);
	event:Direction(hoa_map.MapMode.EAST);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["captain"]);
	event:Direction(hoa_map.MapMode.EAST);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["sergeant"]);
	event:Direction(hoa_map.MapMode.EAST);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["river_knight1"]);
	event:Direction(hoa_map.MapMode.EAST);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["river_knight2"]);
	event:Direction(hoa_map.MapMode.EAST);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["river_knight3"]);
	event:Direction(hoa_map.MapMode.EAST);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["river_knight4"]);
	event:Direction(hoa_map.MapMode.EAST);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["river_knight5"]);
	event:Direction(hoa_map.MapMode.EAST);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["river_knight6"]);
	event:Direction(hoa_map.MapMode.EAST);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["river_knight7"]);
	event:Direction(hoa_map.MapMode.EAST);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["river_knight8"]);
	event:Direction(hoa_map.MapMode.EAST);
	event_id = event_id + 1; event = hoa_map.ChangePropertySpriteEvent.Create(event_id, sprites["river_knight9"]);
	event:Direction(hoa_map.MapMode.EAST);
	-- Spawn the boss sprite, then move it close to the knights position while shaking the screen as it walks
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "SpawnBoss", "SpawnBossComplete");
	event:AddEventLinkAtEnd(event_id + 1);
	event_id = event_id + 1; event = hoa_map.PathMoveSpriteEvent.Create(event_id, sprites["scorpion_boss"], 262, 20);
	event:AddEventLinkAtStart(event_id + 1);
	event:AddEventLinkAtEnd(event_id + 2);
	event:AddEventLinkAtEnd(event_id + 3, 1000);
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "BossMovementShake", "");
	event_id = event_id + 1; event = hoa_map.CustomEvent.Create(event_id, "StopScreenShake", "");
	event_id = event_id + 1; event = hoa_map.BattleEncounterEvent.Create(event_id);
	event:SetMusic("mus/The_Creature_Awakens.ogg");
	event:SetBackground(battle_background);
	event:AddEnemy(91);
	event:AddEventLinkAtEnd(event_sequences["final_scene"], 0);

	---------- Event Sequence 13: Post boss encounter and final scene

	-- Part 4: post boss battle dialogue and end map transition
	event_id = event_sequences["final_scene"];
	event = hoa_map.CustomEvent.Create(event_id, "SwitchContextUnblocked", "IsScreenFading");
	event:AddEventLinkAtEnd(event_id + 1, 500);
	event_id = event_id + 1; event = hoa_map.DialogueEvent.Create(event_id, dialogues["after_boss"]);
	event:AddEventLinkAtEnd(event_id + 2, 500);
	-- Transition to the return scene map
	event_id = event_id + 1; event = hoa_map.MapTransitionEvent.Create(event_id, "lua/scripts/maps/a01_return_scene.lua");

	----------------------------------------------------------------------------
	---------- Miscellaneous Events
	----------------------------------------------------------------------------
	-- An event used by a dialogue to determine if event_sequences["observe_passing"] should be started
	event = hoa_map.CustomEvent.Create(1010, "IfStartObservePassingEvent", "");

	-- TODO: see about having this sound event play occasionally during the map
	event_sequences["hiss_sound"] = 1020;
	event = hoa_map.SoundEvent.Create(event_sequences["hiss_sound"], "snd/evil_hiss.ogg");

	event_sequences["fatigue_restore"] = 1030;
	event = hoa_map.CustomEvent.Create(event_sequences["fatigue_restore"], "RestoreParty", ""); -- This event is called within the npc_heals dialogue lines

end -- function CreateEvents()



-- Short screen shake during the passage collapse event chain
functions["PassageCollapseShake"] = function()
	VideoManager:ShakeScreen(2.0, 2000.0, hoa_video.VideoEngine.VIDEO_FALLOFF_NONE);
end

-- Small degree of screen shaking while the boss sprite is moving
functions["BossMovementShake"] = function()
	-- Shake time is 0, meaning it will continue to shake until VideoManager:StopShaking() is called
	VideoManager:ShakeScreen(1.0, 0.0, hoa_video.VideoEngine.VIDEO_FALLOFF_NONE);
end

-- Stop any active screen shaking
functions["StopScreenShake"] = function()
	VideoManager:StopShaking();
end

-- Gives a potion to the player via the treasure menu
functions["RewardPotion"] = function()
	AudioManager:PlaySound("snd/obtain.wav");
	corpse_treasure = hoa_map.TreasureContainer();
	corpse_treasure:AddObject(1, 1);
	TreasureManager:Initialize(corpse_treasure);
end

-- Wraps the start of the observ_passing event chain so that it is only ever executed one time
functions["IfStartObservePassingEvent"] = function()
	if (GlobalRecords:DoesRecordExist("observed_passing") == false) then
		GlobalRecords:AddNewRecord("observed_passing", 1);
		EventManager:StartEvent(event_sequences["observe_passing"]);
	end
end

-- Quickly Fades the screen to black
functions["FadeOutScreen"] = function()
	VideoManager:FadeScreen(hoa_video.Color(0.0, 0.0, 0.0, 1.0), 1000);
end

-- Quickly fades screen from back into full view
functions["FadeInScreen"] = function()
	VideoManager:FadeScreen(hoa_video.Color(0.0, 0.0, 0.0, 0.0), 1000);
end

-- Returns true when screen is no longer in the process of fading
functions["IsScreenFading"] = function()
	if (VideoManager:IsFading() == true) then
		return false;
	else
		return true;
	end
end

-- Switches the map context of all map objects to the collapsed context
functions["SwitchContextCollapsed"] = function()
	SwapContextForAllObjects(contexts["collapsed"]);
end

-- Switches the map context of all map objects to the unblocked context
-- And makes numerous changes to transition the map state to the final scene
functions["SwitchContextUnblocked"] = function()
	SwapContextForAllObjects(contexts["unblocked"]);

	-- The boss has been defeated at this point, so hide it from the map
	sprites["scorpion_boss"]:ChangeState(hoa_map.EnemySprite.INACTIVE);

	-- Move the character sprite and all NPCs so they are no longer standing in the now flowing riverbed
	sprites["captain"]:SetPosition(251, 13);
	sprites["captain"]:SetDirection(hoa_map.MapMode.SOUTH);
	sprites["sergeant"]:SetPosition(253, 14);
	sprites["sergeant"]:SetDirection(hoa_map.MapMode.WEST);
	sprites["claudius"]:SetPosition(248, 14);
	sprites["claudius"]:SetDirection(hoa_map.MapMode.EAST);
	sprites["river_knight1"]:SetPosition(251, 16);
	sprites["river_knight1"]:SetDirection(hoa_map.MapMode.NORTH);

	sprites["river_knight2"]:SetPosition(240, 17);
	sprites["river_knight2"]:SetDirection(hoa_map.MapMode.EAST);
	sprites["river_knight3"]:SetPosition(243, 16);
	sprites["river_knight3"]:SetDirection(hoa_map.MapMode.EAST);
	sprites["river_knight4"]:SetPosition(241, 20);
	sprites["river_knight4"]:SetDirection(hoa_map.MapMode.NORTH);
	sprites["river_knight5"]:SetPosition(243, 19);
	sprites["river_knight5"]:SetDirection(hoa_map.MapMode.NORTH);

	sprites["river_knight6"]:SetPosition(250, 21);
	sprites["river_knight6"]:SetDirection(hoa_map.MapMode.NORTH);
	sprites["river_knight7"]:SetPosition(247, 22);
	sprites["river_knight7"]:SetDirection(hoa_map.MapMode.NORTH);
	sprites["river_knight8"]:SetPosition(249, 23);
	sprites["river_knight8"]:SetDirection(hoa_map.MapMode.NORTH);
	sprites["river_knight9"]:SetPosition(251, 25);
	sprites["river_knight9"]:SetDirection(hoa_map.MapMode.NORTH);

	-- Set the screen to black and begin fading it back in
	VideoManager:FadeScreen(hoa_video.Color(0.0, 0.0, 0.0, 1.0), 0);
	VideoManager:FadeScreen(hoa_video.Color(0.0, 0.0, 0.0, 0.0), 1000);

	-- Set the camera back to Claudius
	Map:SetCamera(sprites["claudius"], 0);
end

-- Makes the knight that moved along the short path disappear
functions["VanishPathSprite"] = function()
	sprites["passage_knight2"].collidable = false;
	sprites["passage_knight2"].visible = false;
end


-- Change to scene state and make camera sprite invisible with no collision
functions["HideCameraSprite"] = function()
	Map.camera:SetMoving(false);
	Map:PushState(hoa_map.MapMode.STATE_SCENE);
	Map.camera.visible = false;
	Map.camera.collidable = false;
end

-- Exit scene state and restore camera sprite visibility and collision status
functions["ShowCameraSprite"] = function()
	Map:PopState();
	Map.camera.visible = true;
	Map.camera.collidable = true;
end

-- Replace dialogue of the knight that guides the player to the right path after the passage collapse
functions["ReplaceGuideDialogue"] = function()
	sprites["passage_knight1"]:RemoveDialogueReference(20);
	sprites["passage_knight1"]:AddDialogueReference(21);
end

-- Move camera to corpse
functions["CameraPanToCorpse"] = function()
	Map:MoveVirtualFocus(206, 147);
	Map:SetCamera(Map.virtual_focus, 2000);
end

-- Move camera back to player
functions["SetCameraToPlayer"] = function()
	Map:SetCamera(sprites["claudius"], 500);
end

-- Move camera to talking knight sprite
functions["CameraToGuideSprite"] = function()
	Map:SetCamera(sprites["passage_knight1"], 1000);
end

-- Move camera to talking knight sprite
functions["CameraFollowPathSprite"] = function()
	Map:SetCamera(sprites["passage_knight2"], 500);
end

-- Move the virtual focus to the player sprite and set the map camera to point to the focus
functions["VirtualFocusToPlayer"] = function()
	Map:MoveVirtualFocus(sprites["claudius"].x_position, sprites["claudius"].y_position);
	Map:SetCamera(Map.virtual_focus);
end

-- Helper function that swaps the context for all objects on the map to the context provided in the argument
SwapContextForAllObjects = function(new_context)
	local max_index = ObjectManager:GetNumberObjects() - 1;

	for i = 0, max_index do
		ObjectManager:GetObjectByIndex(i):SetContext(new_context);
	end
end

-- Restores the HP and MP of each member in the character party to maximum and plays a sound
functions["RestoreParty"] = function()
	GlobalManager:RestoreAllCharacterHitPoints();
	GlobalManager:RestoreAllCharacterSkillPoints();
	-- TODO: See if there's a more appropriate sound than this
	AudioManager:PlaySound("snd/heal.wav");
end

-- Begins spawning the boss sprite at the end of the cave
functions["SpawnBoss"] = function()
	sprites["scorpion_boss"]:SetSpawnedState(hoa_map.EnemySprite.ACTIVE);
	sprites["scorpion_boss"]:ChangeState(hoa_map.EnemySprite.SPAWN);
	-- Changing the state of an enemy sprite also changes the no_collision property, which we want to remain off
	sprites["scorpion_boss"].collidable = false;
end

-- Returns true when the boss sprite has finished spawning
functions["SpawnBossComplete"] = function()
	if (sprites["scorpion_boss"]:GetState() == hoa_map.EnemySprite.ACTIVE) then
		-- Ensure that the no collision property remains active in the sprite's new state
		sprites["scorpion_boss"].collidable = false;
		return true;
	else
		return false;
	end
end
